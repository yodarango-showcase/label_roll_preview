import { validateDimensions } from "./validate";

const coordinates = {
  1: (length, isSquaredCorners) => {
    if (length >= 5) {
      const squaredCoor = [
        "M1 12.7414V1C1 1 11.5 6.78659 39 7.874C70 9.0998 83 7.874 83 7.874V18.8233C83 18.8233 61.0056 20.6012 39 19.7862C13 18.8233 1 12.7414 1 12.7414Z",
      ];
      let coor = {
        addStyles: [{ transform: "translate(-2px, -9px)" }],
      };
      if (length > 7)
        coor.path = isSquaredCorners
          ? squaredCoor
          : [
              `M2.68614 13.4744C1.6363 13.0552 1 12.029 1 10.8986V6.07872C1 3.79579 3.5446 2.15932 5.71434 2.86927C11.1911 4.6613 21.7517 7.19196 39 7.874C61.1636 8.75039 74.1263 8.37362 79.7154 8.08762C81.4812 7.99726 83 9.40208 83 11.1702V16.056C83 17.6191 81.8083 18.9168 80.2487 19.0211C73.6823 19.4601 56.3446 20.4286 39 19.7862C18.5936 19.0305 6.81128 15.1214 2.68614 13.4744Z`,
              ,
            ];
      else if (length >= 5)
        coor.path = isSquaredCorners
          ? squaredCoor
          : [
              length === 5
                ? `M3.79293 15.2812C2.29346 14.5536 1.4585 13 1.4585 11.3333V6.16644C1.4585 4.11757 3.46804 2.65066 5.43662 3.21859C10.3276 4.62962 18.8053 6.78868 25.521 7C34.4824 7.81933 41.0507 8.19112 45.1666 8.35984C47.9852 8.47537 50.2418 10.8322 50.1561 13.6518L50.0965 15.6144C50.014 18.3304 47.785 20.4817 45.0681 20.4414C38.2411 20.3402 25.9723 20.0843 19.6877 19.5C12.1014 18.7947 6.6624 16.6738 3.79293 15.2812Z`
                : length === 6
                ? `M4.36965 15.2289C2.70421 14.5408 1.729 12.886 1.729 11.084V5.96305C1.729 3.97419 3.62565 2.52024 5.55584 2.99975C11.1678 4.39394 21.8729 6.77742 30.2603 7C41.5857 7.87329 49.6876 8.23815 54.4807 8.3906C57.3113 8.48062 59.5714 10.8498 59.4695 13.68L59.3986 15.6486C59.3012 18.3508 57.0812 20.4847 54.3774 20.4529C46.5182 20.3602 31.0936 20.1077 23.3436 19.5C14.235 18.7858 7.73702 16.62 4.36965 15.2289Z`
                : `M4.88578 15.1684C3.08967 14.5199 2 12.7892 2 10.8796V5.81936C2 3.87485 3.81561 2.43193 5.71553 2.84599C11.9768 4.21057 24.9321 6.769 35 7C48.737 7.9158 58.3737 8.27247 63.7964 8.41139C66.6386 8.48419 68.9014 10.8675 68.783 13.7082L68.7008 15.6812C68.5887 18.3702 66.3714 20.4869 63.6802 20.4607C54.871 20.3749 36.2298 20.1257 27 19.5C16.3107 18.7754 8.72997 16.5564 4.88578 15.1684Z`,
            ];
      return coor;
    } else if (length <= 2)
      return {
        path: isSquaredCorners
          ? [
              "M1 12.5V1.5C4.97405 3.08962 10.9135 4.81027 18 6.15611V17.9082C10.4992 16.2067 4.95252 14.1939 1 12.5Z",
              "M18 2.49989V14.9999C11.5536 14.491 5.91294 13.6942 1 12.7464V0.854004C6.26722 1.69334 12.0292 2.30086 18 2.49989Z",
              "M1 1.03125V13.4399C6.7331 13.6221 13.3076 13.6226 20 13.5314V1.35424C13.3227 1.37745 6.93587 1.3001 1 1.03125Z",
              "M20 12.9737V1.03125C13.5337 1.15328 7.1603 1.27531 1 1.3293V13.4669C7.58648 13.3452 14.1479 13.1524 20 12.9737Z",
            ]
          : [
              `M2.82635 13.2572C1.71243 12.8107 1 11.7219 1 10.5218V5.9311C1 3.80871 3.15198 2.33739 5.17448 2.98084C8.11844 3.91745 11.634 4.84616 15.5636 5.66967C16.974 5.96523 18 7.19898 18 8.63998V14.1514C18 16.0761 16.2112 17.5048 14.349 17.0183C9.65861 15.793 5.85628 14.4718 2.82635 13.2572Z`,
              `M15.1011 2.37142C16.7166 2.46113 18 3.78409 18 5.40204V11.7542C18 13.5041 16.5075 14.8852 14.7659 14.715C10.6435 14.3122 6.87455 13.7914 3.43566 13.1934C2.01918 12.9471 1 11.7081 1 10.2703V4.37039C1 2.52523 2.6497 1.11952 4.4786 1.36403C7.87519 1.81813 11.4389 2.16805 15.1011 2.37142Z`,
              `M4.13621 1.15459C2.42705 1.09704 1 2.46007 1 4.1702V10.5337C1 12.1535 2.28534 13.482 3.90475 13.5157C8.02083 13.6013 12.4777 13.6082 17.0407 13.5656C18.6815 13.5502 20 12.2129 20 10.572V4.36469C20 2.70376 18.6504 1.3599 16.9894 1.35755C12.5453 1.35128 8.24441 1.29294 4.13621 1.15459Z`,
              `M17.0918 13.0616C18.7123 13.0133 20 11.6851 20 10.0639V4.0884C20 2.4094 18.6221 1.05741 16.9434 1.08881C12.5554 1.17087 8.2194 1.24794 3.9736 1.29843C2.32712 1.31801 1 2.65653 1 4.30312V10.411C1 12.0895 2.37719 13.4418 4.05534 13.4056C8.5344 13.3089 12.9524 13.1852 17.0918 13.0616Z`,
            ],
        addStyles: [
          { transform: "translate(-2px, -10px)" },
          { transform: "translate(-5px, -4px)" },
          { transform: "translate(-10px, -2px)" },
          { transform: "translate(-13px, -2px)" },
        ],
      };
    else if (length < 5)
      return {
        path: isSquaredCorners
          ? [
              "M1 12.5V1.5C8.5 4.5 23 7.96667 39 8.5V21C20 19.5 8 15.5 1 12.5Z",
              "M43 12.5338V0.591337C28 0.874413 13.5 1.15746 1 0.591309V13C13.5 13.3971 30 12.9308 43 12.5338Z",
            ]
          : [
              `M2.8241 13.2563C1.7102 12.8097 1 11.7219 1 10.5218V5.9311C1 3.80871 3.15036 2.33683 5.17286 2.98032C12.6527 5.36017 23.8228 7.68919 36.101 8.37104C37.7165 8.46075 39 9.78372 39 11.4017V17.7538C39 19.5037 37.5057 20.8846 35.764 20.7144C20.1168 19.1852 9.56084 15.9571 2.8241 13.2563Z`,
              `M40.0935 12.6222C41.714 12.5738 43 11.2457 43 9.62451V3.64897C43 1.96997 41.6218 0.617989 39.9431 0.649385C27.2664 0.886472 15.0241 1.08182 4.13526 0.715108C2.4261 0.657546 1 2.02062 1 3.73075V10.0943C1 11.714 2.28336 13.0425 3.90278 13.0762C15.0212 13.3075 28.6264 12.9645 40.0935 12.6222Z`,
            ],
        addStyles: [
          { transform: "translate(-2px, -10px)" },
          { transform: "translate(-5px, -2px)" },
        ],
      };
  },
  2: (length, isSquaredCorners) => {
    if (length >= 5) {
      const squaredCoor = [
        "M1 21V1.5C1 1.5 17.3272 6.73156 34 8.02564C52.5 9.46154 83 9.46154 83 9.46154V30.9537C83 30.9537 45.086 31.3379 30.0968 29.8923C10.6989 28.0216 1 21 1 21Z",
      ];
      let coor = {
        addStyles: [{ transform: "translate(-2px, -9px)" }],
      };
      if (length > 7)
        coor.path = isSquaredCorners
          ? squaredCoor
          : [
              `M2.72959 22.0757C1.61558 21.4397 1 20.2404 1 18.9576V6.982C1 4.27137 3.6459 2.31312 6.26388 3.01575C12.412 4.66583 23.1326 7.18215 34 8.02564C48.4189 9.14478 70.1273 9.39166 79.0034 9.44612C81.2125 9.45968 83 11.2524 83 13.4615V26.994C83 29.1874 81.2495 30.9701 79.0562 30.9815C68.9609 31.0341 42.1352 31.0533 30.0968 29.8923C15.4283 28.4777 6.30589 24.1177 2.72959 22.0757Z`,
              ,
            ];
      else if (length >= 5)
        coor.path = isSquaredCorners
          ? squaredCoor
          : [
              length === 5
                ? `M3.72162 22.7401C2.01803 22.0306 1 20.3418 1 18.4963V8.57826C1 5.60108 3.5814 3.28985 6.53615 3.65464C9.83167 4.0615 14.3671 4.64783 19.5 5.38475C29.6843 6.8469 38.5481 7.23758 43.8336 7.3227C46.6607 7.36823 49 9.65524 49 12.4828V23.884C49 26.6903 46.6921 28.9438 43.8875 28.8456C37.1698 28.6104 25.521 28.0849 19.5 27.1236C12.2964 25.9734 6.78714 24.017 3.72162 22.7401Z`
                : length === 6
                ? `M3.73344 23.5451C2.02201 22.8473 1 21.1584 1 19.3102V9.5576C1 6.31288 4.04577 3.90106 7.22835 4.53303C12.5678 5.5933 20.5141 6.93622 27.7064 7.22719C40.7696 7.75569 50.6312 8.05733 56.1126 8.2076C58.8316 8.28215 61 10.5059 61 13.226V25.1194C61 27.9141 58.7177 30.1642 55.9238 30.0959C47.6781 29.8943 31.4949 29.3953 23.5228 28.4424C14.1036 27.3165 7.26696 24.9857 3.73344 23.5451Z`
                : `M4.64745 22.8701C2.98534 22.1491 2 20.4855 2 18.6738V9.05186C2 5.91215 4.85546 3.53433 7.9532 4.04593C14.4607 5.12063 25.1417 6.68222 34 7.01351C48.6696 7.56216 58.5708 7.99994 63.8754 8.24805C66.4875 8.37022 68.5469 10.4931 68.6076 13.1074L68.881 24.8787C68.9463 27.6868 66.6967 29.9952 63.888 29.9712C54.9291 29.8948 36.4777 29.6165 27.3396 28.6067C16.3484 27.3922 8.48296 24.534 4.64745 22.8701Z`,
            ];
      return coor;
    } else if (length <= 2)
      return {
        path: isSquaredCorners
          ? [
              "M1 21V1.5C6.06656 3.2733 11.6465 4.91824 18 6.23975V28.1762C11.1215 26.1132 5.55764 23.4129 1 21Z",
              "M18.0002 3V25.5C11.6178 25.3176 5.96696 24.4702 0.950684 23.2488V1C6.10224 1.91255 11.7456 2.60909 18.0002 3Z",
              "M1 1.18164L1 23.6589C6.7331 23.9786 13.3076 24.0512 20 23.969L20 1.97828C13.3227 1.90135 6.93587 1.65354 1 1.18164Z",
              "M20 22.1818L20 0.678711C13.5337 0.892908 7.1603 1.01477 1 1.00448L1 22.9024C7.58648 22.7648 14.1479 22.4956 20 22.1818Z",
            ]
          : [
              `M3.1365 22.1105C1.81612 21.4383 1 20.0733 1 18.5917V7.13793C1 4.38253 3.72148 2.4518 6.35668 3.25674C9.02406 4.07151 11.8358 4.83958 14.8226 5.53801C16.668 5.96955 18 7.59818 18 9.49337V22.8005C18 25.4798 15.4154 27.3989 12.9066 26.4581C9.24203 25.0838 6.00637 23.5715 3.1365 22.1105Z`,
              `M14.2522 2.72375C16.3569 2.90294 18.0002 4.64555 18.0002 6.75781V21.3841C18.0002 23.638 16.1375 25.4568 13.8901 25.2859C10.366 25.018 7.08172 24.5472 4.01817 23.9306C2.2098 23.5666 0.950684 21.9505 0.950684 20.1059V5.77084C0.950684 3.28259 3.19793 1.40092 5.66133 1.75177C8.38817 2.14014 11.2468 2.46787 14.2522 2.72375Z`,
              `M5.31988 1.48165C2.98995 1.34201 1 3.17815 1 5.51226V19.8757C1 21.9984 2.65768 23.7543 4.77891 23.8307C8.3466 23.9593 12.1525 24.0091 16.0488 23.9989C18.2388 23.9931 20 22.2078 20 20.0178V5.93246C20 3.7413 18.2368 1.96072 16.0462 1.91156C12.3592 1.82882 8.77427 1.68867 5.31988 1.48165Z`,
              `M16.2139 22.3733C18.3374 22.2723 20 20.5165 20 18.3905V4.8134C20 2.55236 18.1274 0.742165 15.8671 0.803027C12.2008 0.90175 8.5732 0.967596 5.0066 0.993152C2.79491 1.009 1 2.79942 1 5.01117V18.818C1 21.0598 2.84236 22.8652 5.08327 22.8007C8.89504 22.6911 12.6503 22.5429 16.2139 22.3733Z`,
            ],
        addStyles: [
          { transform: "translate(-2px, -9px)" },
          { transform: "translate(-6px, -4px)" },
          { transform: "translate(-9px, -2px)" },
          { transform: "translate(-12px, -1px)" },
        ],
      };
    else if (length < 5)
      return {
        path: isSquaredCorners
          ? [
              "M1 21V1.5C11 5 23 8 39 9V31.5C21.5 31 9.5 25.5 1 21Z",
              "M43 23V1.49688C28 1.99375 13.5 1.99375 1 1V23.4773C13.5 24.1742 30 23.697 43 23Z",
            ]
          : [
              `M3.13467 22.1096C1.81429 21.4374 1 20.0733 1 18.5917V7.13792C1 4.38253 3.72024 2.45139 6.35542 3.25636C14.3958 5.71244 23.7482 7.74415 35.2498 8.72356C37.3544 8.90278 39 10.6456 39 12.7578V27.3841C39 29.638 37.1338 31.4566 34.8864 31.2857C20.9403 30.2249 10.7497 25.9864 3.13467 22.1096Z`,
              `M39.2138 23.1915C41.3373 23.0905 43 21.3346 43 19.2087V5.63157C43 3.37053 41.1273 1.56033 38.8671 1.6212C27.0304 1.93992 15.5968 1.91595 5.31893 1.29995C2.989 1.1603 1 2.99651 1 5.33062V19.6941C1 21.8167 2.65693 23.5726 4.77818 23.6491C15.4436 24.0335 28.2375 23.7136 39.2138 23.1915Z`,
            ],
        addStyles: [
          { transform: "translate(-2px, -10px)" },
          { transform: "translate(-5px, -2px)" },
        ],
      };
  },

  3: (length, isSquaredCorners) => {
    if (length >= 5) {
      const squaredCoor = [
        "M1 30.2551V1.5C1 1.5 17.8272 6.69753 34.5 8.5C53 10.5 83 9.5 83 9.5V40.9355C83 40.9355 45.086 41.4707 30.0968 39.4572C10.6989 36.8514 1 30.2551 1 30.2551Z",
      ];
      let coor = {
        addStyles: [{ transform: "translate(-2px, -10px)" }],
      };
      if (length > 7)
        coor.path = isSquaredCorners
          ? squaredCoor
          : [
              `M3.28962 31.5786C1.82515 30.8068 1 29.2642 1 27.6088V8.27746C1 4.91117 4.26351 2.47157 7.52043 3.32266C13.9414 5.00057 24.2499 7.39188 34.5 8.5C48.2843 9.9902 68.4531 9.81488 77.8396 9.62868C80.6658 9.57261 83 11.8427 83 14.6694V36.0056C83 38.7395 80.81 40.9638 78.0761 40.9808C67.3216 41.0475 41.7642 41.0245 30.0968 39.4572C16.1403 37.5824 7.20463 33.6418 3.28962 31.5786Z`,
              ,
            ];
      else if (length >= 5)
        coor.path = isSquaredCorners
          ? squaredCoor
          : [
              length === 5
                ? `M3.38439 29.302C1.86866 28.5277 1 26.9453 1 25.2433V10.3366C1 7.10492 4.02101 4.70302 7.18373 5.36731C10.4145 6.04589 14.6955 6.89635 19.5 7.72581C29.8856 9.51879 38.898 10.3202 44.1428 10.6678C46.8461 10.8469 49 13.078 49 15.7873V31.8601C49 34.6756 46.6783 36.932 43.8654 36.8134C37.1443 36.5302 25.5144 35.8983 19.5 34.7436C12.024 33.3083 6.37291 30.8286 3.38439 29.302Z`
                : length === 6
                ? `M3.31094 29.4014C1.83463 28.6244 1 27.07 1 25.4017V10.7799C1 7.41288 4.26783 4.96963 7.53607 5.77914C12.8701 7.10031 20.651 8.73293 27.7064 9.09202C40.792 9.75805 50.665 10.1377 56.1408 10.3264C58.8486 10.4197 61 12.6395 61 15.3489V32.8916C61 35.695 58.7037 37.9479 55.9016 37.8616C47.6491 37.6076 31.4878 36.9798 23.5228 35.7821C13.713 34.3069 6.70439 31.1875 3.31094 29.4014Z`
                : `M4.04933 30.8675C2.72413 30.051 2 28.5871 2 27.0305V10.4865C2 7.20798 5.10412 4.79312 8.30281 5.51216C14.8384 6.98131 25.2985 9.05404 34 9.5C48.731 10.255 58.6537 10.8568 63.9418 11.196C66.5264 11.3618 68.5336 13.4852 68.5775 16.0747L68.9137 35.9082C68.9611 38.7051 66.7148 40.9935 63.9176 40.9609C54.9699 40.8566 36.4878 40.4759 27.3396 39.0907C15.7418 37.3344 7.62422 33.0703 4.04933 30.8675Z`,
            ];
      return coor;
    } else if (length <= 2)
      return {
        path: isSquaredCorners
          ? [
              "M1 29.5V1C6.0165 2.50495 11.6621 4.0435 18 5.34901V35.8308C11.3349 34.1696 5.69185 32.1066 1 29.5Z",
              "M18 3.28862V34.5002C11.7725 33.7454 6.11479 32.8481 1 31.7546V1.12305C6.2188 2.06698 11.8752 2.83228 18 3.28862Z",
              "M1 0.960449L1 32.4604C6.7331 32.9155 13.3076 33.2671 20 33.4186L20 1.75133C13.1974 1.68386 6.75385 1.43622 1 0.960449Z",
              "M20 32.9606L20 1.39551C13.5886 1.63373 7.17716 1.77013 1 1.77075L1 33.4847C7.58648 33.5516 14.1479 33.4073 20 32.9606Z",
            ]
          : [
              `M3.08435 30.5917C1.78188 29.9484 1 28.5991 1 27.1464V6.37612C1 3.69667 3.58206 1.77717 6.16527 2.48885C8.88288 3.23756 11.7628 3.97272 14.813 4.66105C16.6645 5.07889 18 6.71096 18 8.60905V30.7115C18 33.3126 15.553 35.2287 13.0653 34.4688C9.3829 33.344 6.06099 32.0618 3.08435 30.5917Z`,
              `M14.3003 2.97094C16.3843 3.17366 18 4.90783 18 7.00168V29.9861C18 32.3861 15.9005 34.2495 13.5234 33.9187C10.2354 33.4612 7.11938 32.9562 4.17086 32.3946C2.31732 32.0415 1 30.4062 1 28.5194V5.91144C1 3.41731 3.25717 1.53443 5.72333 1.90688C8.46888 2.32152 11.3266 2.68168 14.3003 2.97094Z`,
              `M6.41728 1.33129C3.49787 1.16883 1 3.46654 1 6.39046V27.8411C1 30.4491 3.00397 32.6227 5.60654 32.7907C8.57397 32.9823 11.6952 33.1436 14.8878 33.2637C17.6915 33.3692 20 31.1094 20 28.3036V6.70149C20 3.95942 17.7912 1.73362 15.0499 1.66763C12.0729 1.59597 9.18521 1.48532 6.41728 1.33129Z`,
              `M15.3763 33.2458C17.9871 33.1198 20 30.9415 20 28.3277V6.58474C20 3.75052 17.6466 1.48537 14.8135 1.56547C11.8542 1.64914 8.90833 1.70904 5.99926 1.74179C3.23821 1.77289 1 4.00902 1 6.77025V28.5352C1 31.2768 3.20788 33.5126 5.94943 33.4937C9.1668 33.4715 12.3364 33.3925 15.3763 33.2458Z`,
            ],
        addStyles: [
          { transform: "translate(-2px, -9px)" },
          { transform: "translate(-5px, -4px)" },
          { transform: "translate(-9px, -2px)" },
          { transform: "translate(-13px, -2px)" },
        ],
      };
    else if (length < 5)
      return {
        path: isSquaredCorners
          ? [
              "M1 30V1.5C11 4.5 23.5 7.63354 39 8.7884V40C22.5 38 10 35 1 30Z",
              "M43 33V1.4349C28 1.99225 13 1.99225 1 1V32.5C13.5 33.4922 30 33.9922 43 33Z",
            ]
          : [
              `M3.61376 31.3495C1.97669 30.5638 1 28.8738 1 27.058V8.22015C1 4.87084 4.2262 2.47262 7.46089 3.34133C15.124 5.39932 24.0398 7.31341 34.3755 8.37811C36.979 8.64631 39 10.8124 39 13.4297V34.3573C39 37.3574 36.3733 39.6881 33.404 39.2599C21.0943 37.4848 11.2465 35.0125 3.61376 31.3495Z`,
              `M38.3776 33.2851C40.9884 33.1591 43 30.9809 43 28.3671V6.62413C43 3.7899 40.6464 1.52477 37.8133 1.60487C26.7545 1.91754 15.8847 1.89823 6.41597 1.37125C3.49656 1.20878 1 3.50658 1 6.4305V27.8812C1 30.4891 3.0029 32.6627 5.60547 32.8307C15.8282 33.4906 27.8764 33.7919 38.3776 33.2851Z`,
            ],
        addStyles: [
          { transform: "translate(-2px, -10px)" },
          { transform: "translate(-5px, -2px)" },
        ],
      };
  },

  4: (length, isSquaredCorners) => {
    if (length >= 5) {
      const squaredCoor = [
        "M1 36.5V1C1 1 18.2473 6.04303 35 7C63.2151 8.61175 83 8 83 8V49.919C83 49.919 45.086 50.5914 30.0968 48.0616C10.6989 44.7877 1 36.5 1 36.5Z",
      ];
      let coor = {
        addStyles: [{ transform: "translate(-2px, -8px)" }],
      };
      if (length > 7)
        coor.path = isSquaredCorners
          ? squaredCoor
          : [
              `M3.2317 38.1244C1.77026 37.1532 1 35.4896 1 33.7348V9.0056C1 5.00392 4.85108 2.07518 8.74963 2.9778C15.3372 4.50299 25.2523 6.44318 35 7C53.808 8.07438 68.87 8.16076 76.8229 8.09893C80.2092 8.0726 83 10.802 83 14.1884V44.0245C83 47.2967 80.3888 49.9613 77.1166 49.9828C65.8695 50.0565 41.4302 49.9744 30.0968 48.0616C16.0711 45.6944 7.11605 40.7059 3.2317 38.1244Z`,
              ,
            ];
      else if (length >= 5)
        coor.path = isSquaredCorners
          ? squaredCoor
          : [
              length === 5
                ? `M2.80504 35.9098C1.62615 35.0669 1 33.6911 1 32.2418V9.32515C1 5.84308 4.51853 3.30322 7.92207 4.03855C10.5497 4.60625 13.8147 5.16376 17.5214 5.48908C28.3202 6.43687 38.4548 6.98732 44.1773 7.25485C46.8681 7.38065 49 9.59421 49 12.288V41.5242C49 44.3586 46.6494 46.6209 43.8196 46.4594C37.0915 46.0756 25.5007 45.2224 19.5 43.6664C11.5091 41.5942 5.6031 37.9106 2.80504 35.9098Z`
                : length === 6
                ? `M2.96363 37.0826C1.6191 36.2642 0.879395 34.7866 0.879395 33.2125V9.44049C0.879395 6.17622 3.96202 3.76504 7.15296 4.45302C12.6601 5.64039 20.8994 7.20376 28.1445 7.719C40.9403 8.62902 50.4052 9.01341 55.7341 9.174C58.4773 9.25667 60.6866 11.4988 60.6866 14.2433V42.8479C60.6866 45.668 58.3624 47.9262 55.5449 47.8047C47.3009 47.4493 31.25 46.5751 23.3298 44.9109C13.3351 42.8108 6.25761 39.0875 2.96363 37.0826Z`
                : `M4.13726 36.2717C2.7653 35.4557 2 33.9575 2 32.3613V9.15682C2 5.93566 4.99858 3.53695 8.1549 4.18005C14.6993 5.51347 25.2865 7.44825 34 8C48.3491 8.90862 58.2013 9.33309 63.5957 9.5241C66.3196 9.62055 68.5 11.8533 68.5 14.579V41.9914C68.5 44.7562 66.2651 46.9923 63.5006 46.9527C54.6368 46.8258 36.2458 46.3602 27.1505 44.6586C15.7495 42.5256 7.73695 38.4125 4.13726 36.2717Z`,
            ];
      return coor;
    } else if (length <= 2)
      return {
        path: isSquaredCorners
          ? [
              "M1 36.5V1C6.0909 2.41852 11.6933 3.78401 18 4.94516V45.7454C11.2196 43.4274 5.52111 40.311 1 36.5Z",
              "M18 2.64704V45C11.8138 44.4376 6.13557 43.4199 1 41.9846V0.637207C6.17846 1.47623 11.8142 2.17047 18 2.64704Z",
              "M1 0.957031L1 43.23C6.78235 43.6036 13.3137 43.7385 20 43.7262L20 1.53706C13.1981 1.48817 6.70369 1.34088 1 0.957031Z",
              "M20 42.2298L20 0.524902C13.7324 0.524902 7.27789 0.569652 1 0.555245L1 42.7019C7.47584 42.6371 13.986 42.4525 20 42.2298Z",
            ]
          : [
              `M2.81839 37.9476C1.64038 37.0615 1 35.6493 1 34.1753V7.58366C1 4.27539 4.15478 1.88199 7.36845 2.66746C9.46243 3.17925 11.6408 3.67477 13.9139 4.1458C16.276 4.63525 18 6.69639 18 9.10863V38.752C18 42.1809 14.6183 44.5942 11.5161 43.1333C8.29528 41.6166 5.39121 39.8827 2.81839 37.9476Z`,
              `M13.388 2.24214C15.9879 2.4983 18 4.6637 18 7.27616V39.5243C18 42.4645 15.4725 44.7825 12.5614 44.3701C9.81911 43.9817 7.1897 43.4966 4.67664 42.9187C2.49059 42.4159 1 40.433 1 38.1899V6.51202C1 3.43148 3.75837 1.08738 6.81274 1.48815C8.93054 1.76603 11.1206 2.01873 13.388 2.24214Z`,
              `M6.33958 1.2426C3.4485 1.12279 1 3.41127 1 6.30483V38.5426C1 41.1789 3.04643 43.3663 5.68042 43.4758C8.6718 43.6002 11.8044 43.6734 15.0092 43.7062C17.7669 43.7345 20 41.4932 20 38.7354V6.50126C20 3.75386 17.7831 1.52482 15.036 1.48094C12.0345 1.433 9.12073 1.35784 6.33958 1.2426Z`,
              `M15.1848 42.3949C17.8729 42.3099 20 40.1005 20 37.411V5.52441C20 2.76298 17.7615 0.524729 15.0001 0.531868C12.0114 0.539595 9.00245 0.551164 6.01143 0.555696C3.24552 0.559888 1 2.80034 1 5.56624V37.6511C1 40.4321 3.26931 42.6803 6.0498 42.628C9.13784 42.5699 12.2022 42.4892 15.1848 42.3949Z`,
            ],
        addStyles: [
          { transform: "translate(-2px, -9px)" },
          { transform: "translate(-5px, -4px)" },
          { transform: "translate(-9px, -2px)" },
          { transform: "translate(-12px, -1px)" },
        ],
      };
    else if (length < 5)
      return {
        path: isSquaredCorners
          ? [
              "M1 36.5V1C11.1333 3.82353 23.2933 6.43698 39 7.64706V50C22.5 48.5 9.61333 43.7605 1 36.5Z",
              "M43 43V1.29511C28.5 1.29511 13 1.53462 1 0.727051V43C13.5 43.8076 29.5 43.5 43 43Z",
            ]
          : [
              `M3.19059 38.2244C1.76571 37.1763 1 35.4792 1 33.7104V8.9004C1 4.93047 4.78469 2.05919 8.64743 2.97546C15.8085 4.67412 23.9486 6.16977 33.4658 7.14974C36.5842 7.47084 39 10.0676 39 13.2026V43.4298C39 46.958 35.964 49.7434 32.4762 49.211C20.3407 47.3584 10.4734 43.5815 3.19059 38.2244Z`,
              `M37.2226 43.1959C40.4484 43.0978 43 40.4459 43 37.2186V7.29561C43 3.9819 40.314 1.29641 37.0003 1.30576C26.821 1.3345 16.4574 1.39366 7.40681 1.05514C3.93696 0.925359 1 3.67262 1 7.14489V37.3756C1 40.5391 3.45451 43.1641 6.61578 43.2834C16.2019 43.6449 27.1388 43.5027 37.2226 43.1959Z`,
            ],
        addStyles: [
          { transform: "scale(.9) translate(-2px, -10px)" },
          { transform: "scale(.9) translate(-5px, -2px)" },
        ],
      };
  },

  5: (length, isSquaredCorners) => {
    if (length >= 5) {
      const squaredCoor = [
        "M1 45.1894V1C1 1 15.7473 6.3282 32.5 7.5C60.7151 9.47357 83 9 83 9V60.9008C83 60.9008 45.086 61.7241 30.0968 58.6264C10.6989 54.6176 1 45.1894 1 45.1894Z",
      ];
      let coor = {
        addStyles: [{ transform: "translate(-2px, -10px)" }],
      };
      if (length > 7)
        coor.path = isSquaredCorners
          ? squaredCoor
          : [
              `M2.93534 46.816C1.65409 45.8235 1 44.275 1 42.6542V9.5474C1 5.38886 5.15594 2.40486 9.17486 3.47339C15.0432 5.03363 23.481 6.86915 32.5 7.5C51.8256 8.85177 68.369 9.05549 76.8752 9.04968C80.2388 9.04738 83 11.7653 83 15.1289V55.0297C83 58.2926 80.4038 60.9524 77.1409 60.9787C65.9047 61.0693 41.4383 60.9703 30.0968 58.6264C15.7017 55.6515 6.64788 49.6921 2.93534 46.816Z`,
              ,
            ];
      else if (length >= 5)
        coor.path = isSquaredCorners
          ? squaredCoor
          : [
              length === 5
                ? `M2.31232 45.3495C1.44076 44.5039 1 43.3303 1 42.116V9.48834C1 5.79621 4.96057 3.1851 8.5229 4.15547C11.0411 4.84143 14.0922 5.49727 17.5214 5.89229C28.3539 7.14013 38.518 7.86323 44.2307 8.21313C46.8985 8.37653 49 10.5818 49 13.2546V54.7495C49 57.6068 46.6141 59.8757 43.7648 59.6618C37.0288 59.156 25.4845 58.0368 19.5 56C11.0044 53.1085 4.86537 47.8263 2.31232 45.3495Z`
                : length === 6
                ? `M2.55246 45.8769C1.52867 45.0258 1 43.7514 1 42.4201V9.8134C1 6.28041 4.61573 3.73352 8.04393 4.58764C11.4165 5.4279 15.8409 6.30503 20.9634 6.78796C34.6775 8.08089 47.505 8.80416 54.1884 9.13014C56.874 9.26113 59 11.4725 59 14.1614V55.0936C59 57.9329 56.6394 60.1966 53.8048 60.0331C45.7505 59.5687 30.3866 58.4459 22.7721 56.3249C12.5749 53.4845 5.50898 48.3345 2.55246 45.8769Z`
                : `M2.83793 45.5564C1.64193 44.7071 1 43.318 1 41.8511V8.98137C1 5.5559 4.39542 3.05116 7.73512 3.81291C11.8359 4.74823 17.5943 5.80565 24.4054 6.35475C41.0567 7.69717 56.5934 8.42705 64.1686 8.73634C66.8656 8.84646 69 11.0615 69 13.7608V54.8272C69 57.6552 66.666 59.916 63.8412 59.7814C54.7005 59.346 35.7565 58.2172 26.5259 56.0185C14.591 53.1757 6.3147 48.0253 2.83793 45.5564Z`,
            ];
      return coor;
    } else if (length <= 2)
      return {
        path: isSquaredCorners
          ? [
              "M1 45V1C5.94944 2.7323 11.8888 4.18258 18 5.30122V55.7106C11.2528 53.1796 5.44325 49.7046 1 45Z",
              "M17.5 3.00011V55.5001C11.663 54.7469 6.10956 53.6392 1 52.0702V0.977539C6.03434 1.76508 11.5054 2.41999 17.5 3.00011Z",
              "M1 0.973145L1 53.5568C6.7331 54.0154 13.3076 54.2003 20 54.2178L20 1.72757C13.1981 1.6485 6.70369 1.44845 1 0.973145Z",
              "M20 52.7555L20 0.754883C13.7324 0.754883 7.27789 0.795692 1 0.761268L1 53.2094C7.58648 53.1654 14.1479 52.9806 20 52.7555Z",
            ]
          : [
              `M2.40568 46.4052C1.47752 45.5286 1 44.2888 1 43.0121V8.0474C1 4.60316 4.4123 2.1642 7.743 3.04123C9.73078 3.56464 11.7986 4.05042 13.9106 4.49639C16.2727 4.99516 18 7.05487 18 9.46906V48.4948C18 51.9861 14.5014 54.4033 11.417 52.7676C8.05426 50.9844 5.02602 48.8799 2.40568 46.4052Z`,
              `M12.9839 2.53742C15.5438 2.81537 17.5 4.96472 17.5 7.5396V49.8135C17.5 52.8289 14.8477 55.1701 11.8783 54.6451C9.36616 54.201 6.92079 53.6796 4.55638 53.0712C2.42958 52.524 1 50.5712 1 48.3751V6.82052C1 3.75099 3.74024 1.40661 6.78423 1.80177C8.78426 2.06141 10.8493 2.30563 12.9839 2.53742Z`,
              `M6.42135 1.33586C3.50016 1.18275 1 3.48243 1 6.40763V48.9413C1 51.5481 3.00239 53.7222 5.60556 53.8601C8.60406 54.0189 11.7596 54.1186 14.9871 54.1717C17.7533 54.2172 20 51.9717 20 49.2052V6.67027C20 3.93152 17.7964 1.70685 15.0583 1.64578C12.0784 1.57932 9.18472 1.4807 6.42135 1.33586Z`,
              `M15.192 52.9247C17.8773 52.8393 20 50.6308 20 47.9441V5.75488C20 2.99346 17.7615 0.755425 15.0001 0.761288C12.0167 0.767622 9.01317 0.776204 6.02741 0.774947C3.25527 0.77378 1 3.01662 1 5.78876V48.1759C1 50.9504 3.25914 53.1962 6.03323 53.1498C9.15689 53.0974 12.2348 53.0187 15.192 52.9247Z`,
            ],
        addStyles: [
          { transform: "translate(-2px, -10px)" },
          { transform: "translate(-5px, -5px)" },
          { transform: "translate(-9px, -3px)" },
          { transform: "translate(-12px, -2px)" },
        ],
      };
    else if (length < 5)
      return {
        path: isSquaredCorners
          ? [
              "M1 45V1C11 4.5 23 6.5 38.5 8V60.5C23 58.5 9.5 54 1 45Z",
              "M43 54V1.99936C28.5 1.99936 13 2.21777 1 1.21777V53.8014C13.5 54.8014 30 54.5 43 54Z",
            ]
          : [
              `M2.69629 46.6766C1.57084 45.6372 1 44.1465 1 42.6145V9.45689C1 5.3238 5.09378 2.40276 9.10206 3.41079C16.0445 5.15672 23.9157 6.41807 33.0804 7.43798C36.1513 7.77973 38.5 10.3575 38.5 13.4474V53.6761C38.5 57.2946 35.3151 60.1082 31.7585 59.4411C20.065 57.2478 9.8886 53.319 2.69629 46.6766Z`,
              `M37.2315 54.1991C40.454 54.1012 43 51.4503 43 48.2263V7.99937C43 4.68566 40.314 2.00054 37.0003 2.00796C26.8579 2.03065 16.5325 2.0637 7.5052 1.63416C3.99893 1.46732 1 4.22833 1 7.73857V48.2622C1 51.3904 3.40132 53.9994 6.52581 54.1509C16.1724 54.6187 27.3234 54.5001 37.2315 54.1991Z`,
            ],
        addStyles: [
          { transform: "translate(-2px, -10px)" },
          { transform: "translate(-5px, -3px)" },
        ],
      };
  },

  6: (length, isSquaredCorners) => {
    if (length >= 5) {
      const squaredCoor = [
        "M1 53.4226V1C1 1 15.7473 6.89421 32.5 8.27108C60.7151 10.59 83 10.4096 83 10.4096V71.8835C83 71.8835 45.086 72.8508 30.0968 69.211C10.6989 64.5007 1 53.4226 1 53.4226Z",
      ];
      let coor = {
        addStyles: [{ transform: "translate(-2px, -11px)" }],
      };
      if (length > 7)
        coor.path = isSquaredCorners
          ? squaredCoor
          : [
              `M2.58646 55.0125C1.52296 54.0212 1 52.6211 1 51.1672V9.85957C1 5.61549 5.32723 2.61397 9.39924 3.81019C15.2572 5.53107 23.5953 7.53922 32.5 8.27108C51.884 9.8642 68.4691 10.2777 76.9521 10.3805C80.2846 10.4208 83 13.1257 83 16.4584V66.0346C83 69.2887 80.418 71.9438 77.164 71.9748C65.9383 72.0816 41.4461 71.9669 30.0968 69.211C15.2284 65.6006 6.05827 58.2489 2.58646 55.0125Z`,
              ,
            ];
      else if (length >= 5)
        coor.path = isSquaredCorners
          ? squaredCoor
          : [
              length === 5
                ? `M2.60826 57.0467C1.55396 56.1847 1 54.8835 1 53.5217V10.4545C1 6.60366 5.31948 3.94387 8.99339 5.09757C11.4177 5.85886 14.3031 6.5737 17.5214 7.01505C28.3825 8.5045 38.5716 9.36595 44.2758 9.78124C46.9248 9.97411 49 12.1725 49 14.8285V66.1317C49 69.0065 46.5845 71.2802 43.7208 71.0281C36.8525 70.4234 25.0234 69.0814 19.0182 66.6483C10.9308 63.3714 5.22332 59.1848 2.60826 57.0467Z`
                : length === 6
                ? `M2.99306 57.1725C1.70859 56.3213 1 54.8708 1 53.3299V10.763C1 7.0991 4.88856 4.51146 8.40866 5.52803C11.7329 6.48803 16.0235 7.47166 20.9634 8.02205C34.7015 9.55274 47.55 10.4078 54.2235 10.7921C56.8948 10.9459 59 13.152 59 15.8277V66.0188C59 68.8723 56.6179 71.1401 53.7711 70.9458C45.7076 70.3956 30.376 69.0688 22.7721 66.5657C13.0507 63.3655 6.17519 59.2814 2.99306 57.1725Z`
                : `M2.74334 55.4516C1.60728 54.5922 1 53.2372 1 51.8127V11.0205C1 7.4001 4.78218 4.85217 8.24867 5.89666C12.5086 7.1802 18.3566 8.59171 25 9.23112C41.0854 10.7794 55.4146 11.353 62.6073 11.5583C65.3296 11.636 67.5182 13.8469 67.5409 16.5703L67.9562 66.2952C67.98 69.1525 65.6206 71.4432 62.7679 71.28C53.7062 70.7617 35.1955 69.4343 26.1505 66.8621C14.3131 63.4958 6.12849 58.0121 2.74334 55.4516Z`,
            ];

      return coor;
    } else if (length <= 2)
      return {
        path: isSquaredCorners
          ? [
              "M1 53.5V1C6.07607 3.13729 11.4376 4.84633 18 6.27967V65.5352C11.1049 62.5454 5.21835 58.5093 1 53.5Z",
              "M17.5 3.50021V65.0002C11.7128 64.2535 6.13475 62.9491 1 61.1132V1.09131C5.77576 1.99083 11.1816 2.77811 17.5 3.50021Z",
              "M1 1.50244L1 63.5024C6.66905 64.2111 13.2308 64.4733 20 64.5001L20 2.73208C13.1981 2.58949 6.70369 2.2154 1 1.50244Z",
              "M19.5 63.0024L20 1.50244C13.7324 1.71857 7.27789 1.84127 1 1.78979L1 63.4903C7.28305 63.4374 13.628 63.2199 19.5 63.0024Z",
            ]
          : [
              `M2.21191 54.864C1.40641 54.0037 1 52.8537 1 51.6752V8.5304C1 4.95451 4.65435 2.52052 8.0564 3.6219C9.96847 4.24091 11.964 4.81662 14.0813 5.35539C16.359 5.93499 18 7.95517 18 10.3055V57.9173C18 61.516 14.307 63.9213 11.2289 62.0569C7.79454 59.9767 4.74996 57.5748 2.21191 54.864Z`,
              `M13.0708 2.96454C15.5919 3.28811 17.5 5.42006 17.5 7.96182V59.3141C17.5 62.3296 14.8465 64.6716 11.888 64.0882C9.30586 63.579 6.78392 62.9541 4.34488 62.216C2.32302 61.6041 1 59.7038 1 57.5914V7.12147C1 3.98911 3.84749 1.62697 6.94335 2.10374C8.88259 2.40239 10.9205 2.68856 13.0708 2.96454Z`,
              `M6.63372 2.08013C3.63648 1.83211 1 4.15837 1 7.16586V59.0881C1 61.6097 2.87741 63.7448 5.39051 63.9515C8.43451 64.2019 11.66 64.3533 14.9807 64.4323C17.7491 64.4981 20 62.2489 20 59.4798V7.62787C20 4.90729 17.8242 2.69247 15.1058 2.58521C12.1854 2.46998 9.34755 2.30469 6.63372 2.08013Z`,
              `M14.7241 63.1724C17.3962 63.082 19.5171 60.8965 19.5389 58.2229L19.9576 6.71946C19.9807 3.87457 17.6288 1.58655 14.7847 1.65763C11.8767 1.7303 8.9505 1.77866 6.04107 1.79493C3.26366 1.81046 1 4.05302 1 6.83047V58.4475C1 61.2254 3.26446 63.4724 6.04175 63.4152C8.97165 63.355 11.8839 63.2684 14.7241 63.1724Z`,
            ],
        addStyles: [
          { transform: "translate(-2px, -11px)" },
          { transform: "translate(-5px, -6px)" },
          { transform: "translate(-9px, -4px)" },
          { transform: "translate(-12px, -3px)" },
        ],
      };
    else if (length < 5)
      return {
        path: isSquaredCorners
          ? [
              "M1 53.5V1C10.5 5 21 7.5 38.5 9.5V71C23 69 9 63 1 53.5Z",
              "M42.5 64L43 2.5C28.5 3 13 3 1 1.5V63.5C13 65 29 64.5 42.5 64Z",
            ]
          : [
              `M2.46248 55.1289C1.48542 54.1064 1 52.7244 1 51.3102V10.0365C1 5.74541 5.3892 2.81925 9.49277 4.07388C15.929 6.04171 23.3721 7.55763 33.1822 8.84838C36.2063 9.24626 38.5 11.8032 38.5 14.8533V64.1761C38.5 67.7946 35.3132 70.6087 31.773 69.8596C19.8858 67.3444 9.36335 62.3506 2.46248 55.1289Z`,
              `M36.7697 64.2023C39.9763 64.097 42.5205 61.4735 42.5466 58.2652L42.9491 8.76098C42.9769 5.34713 40.1548 2.60242 36.7417 2.68066C26.7785 2.90907 16.6508 2.84196 7.76168 2.16759C4.16303 1.89458 1 4.68771 1 8.29669V58.2033C1 61.2292 3.25115 63.7916 6.26855 64.0187C15.642 64.7244 26.6222 64.5353 36.7697 64.2023Z`,
            ],
        addStyles: [
          { transform: "translate(-2px, -11px)" },
          { transform: "translate(-5px, -4px)" },
        ],
      };
  },

  7: (length, isSquaredCorners) => {
    if (length >= 5) {
      const squaredCoor = [
        "M1 62.2827V1C1 1 15.7473 7.89042 32.5 9.5C60.7151 12.2109 83 12 83 12V83.8638C83 83.8638 45.086 84.9947 30.0968 80.7397C10.6989 75.2332 1 62.2827 1 62.2827Z",
      ];
      let coor = {
        addStyles: [{ transform: "translate(-2px, -13px)" }],
      };
      if (length > 7)
        coor.path = isSquaredCorners
          ? squaredCoor
          : [
              `M2.28107 63.8048C1.41508 62.8396 1 61.5818 1 60.285V10.426C1 6.03508 5.61855 3.00176 9.7762 4.4139C15.612 6.39603 23.7846 8.66264 32.5 9.5C51.878 11.3618 68.4588 11.8455 76.9442 11.9658C80.2798 12.0131 83 14.7211 83 18.0571V78.0401C83 81.2841 80.434 83.934 77.1902 83.9703C65.9763 84.0957 41.4549 83.9639 30.0968 80.7397C14.7691 76.3886 5.49724 67.3897 2.28107 63.8048Z`,
              ,
            ];
      else if (length >= 5)
        coor.path = isSquaredCorners
          ? squaredCoor
          : [
              length === 5
                ? `M2.40204 63.7018C1.47514 62.8427 1 61.6288 1 60.365V11.1967C1 7.23296 5.59299 4.54302 9.34201 5.82994C11.6926 6.63683 14.456 7.38556 17.5214 7.85638C28.4043 9.52793 38.6126 10.4933 44.3102 10.9573C46.945 11.1719 49 13.365 49 16.0085V74.6659C49 77.5544 46.5633 79.8317 43.6888 79.5478C36.8159 78.8691 25.0141 77.3665 19.0182 74.6456C10.7112 70.8758 4.91504 66.031 2.40204 63.7018Z`
                : length === 6
                ? `M2.70591 64.8893C1.59344 64.0205 1 62.6787 1 61.2672V10.4478C1 6.65124 5.18161 4.0271 8.78814 5.21326C12.0568 6.28831 16.2095 7.37028 20.9634 7.9859C34.7275 9.76834 47.5986 10.7626 54.2613 11.208C56.9173 11.3855 59 13.5859 59 16.2478V76.204C59 79.0725 56.5951 81.3446 53.7356 81.1175C45.6628 80.4763 30.3648 78.9344 22.7721 76.0294C12.7473 72.1938 5.74875 67.2658 2.70591 64.8893Z`
                : `M2.98636 67.5126C1.70738 66.6535 1 65.2041 1 63.6634V12.8752C1 9.21107 4.88289 6.63419 8.38789 7.70237C12.3674 8.91517 17.7566 10.2289 24.0612 10.9315C40.3953 12.7519 55.6406 13.5528 63.1403 13.865C65.8492 13.9777 68 16.2007 68 18.9119V78.7597C68 81.6132 65.6276 83.8818 62.7803 83.6933C53.7231 83.0937 35.1996 81.5566 26.1505 78.5769C14.5874 74.7695 6.50973 69.8792 2.98636 67.5126Z`,
            ];

      return coor;
    } else if (length <= 2)
      return {
        path: isSquaredCorners
          ? [
              "M1 62.1992V1C6.07607 3.40445 11.4376 5.47138 18 7.18009V76.1887C11.1049 72.7821 5.21835 68.158 1 62.1992Z",
              "M17.5 3.81783V75.5001C11.7128 74.5667 6.13475 73.0756 1 70.9853V1.14258C5.77576 2.20186 11.1816 3.09574 17.5 3.81783Z",
              "M0.999996 0.711426L1.5 72.7114C7.04314 73.5333 13.4398 73.916 20 73.9912L20 1.85786C12.9398 1.69577 6.37336 1.32374 0.999996 0.711426Z",
              "M19.5 72.2115L20 0.711426C13.6948 0.92163 7.21294 0.99992 1 0.926955L1 73.0003C7.34956 72.9581 13.7212 72.656 19.5 72.2115Z",
            ]
          : [
              `M1.94625 63.4777C1.31326 62.659 1 61.6434 1 60.6085V8.90099C1 5.23042 4.83183 2.80085 8.26549 4.09817C10.1734 4.81901 12.1652 5.49856 14.2786 6.13599C16.4578 6.79327 18 8.76872 18 11.0449V68.1414C18 71.8479 14.1094 74.2327 11.0768 72.1016C7.58431 69.6474 4.49948 66.7801 1.94625 63.4777Z`,
              `M13.073 3.26402C15.5914 3.60792 17.5 5.73719 17.5 8.27896V69.6291C17.5 72.7082 14.7387 75.068 11.7404 74.3674C9.13947 73.7596 6.60024 73.0294 4.14588 72.1727C2.22607 71.5025 1 69.6557 1 67.6223V7.37311C1 4.17519 3.9619 1.79803 7.11277 2.34457C9.00187 2.67224 10.9844 2.97882 13.073 3.26402Z`,
              `M6.61606 1.23556C3.62499 1.00978 1.01835 3.35371 1.03918 6.35321L1.47026 68.4289C1.48738 70.8939 3.29773 72.9883 5.74964 73.2421C8.67535 73.545 11.7678 73.7487 14.9438 73.8689C17.7256 73.9743 20 71.7179 20 68.934V6.74488C20 4.02817 17.83 1.81389 15.1153 1.70897C12.1358 1.59382 9.28303 1.43687 6.61606 1.23556Z`,
              `M14.9132 72.5259C17.5078 72.3701 19.514 70.2135 19.5322 67.6143L19.9636 5.91757C19.9835 3.07715 17.6361 0.793471 14.7962 0.854384C11.881 0.916915 8.95431 0.950696 6.05886 0.953873C3.27448 0.956927 1 3.20213 1 5.98651V67.9674C1 70.7419 3.25923 72.9902 6.03262 72.9149C9.04709 72.8331 12.0295 72.6992 14.9132 72.5259Z`,
            ],
        addStyles: [
          { transform: "translate(-2px, -13px)" },
          { transform: "translate(-5px, -7px)" },
          { transform: "translate(-9px, -3px)" },
          { transform: "translate(-12px, -1px)" },
        ],
      };
    else if (length < 5)
      return {
        path: isSquaredCorners
          ? [
              "M1 62.1992V1C10.5 5.5 21 8.81776 38.5 10.8178V82.5C23 80 9 73.5 1 62.1992Z",
              "M42.5 73.5L43 1.99993C28 2.5 12 2.25349 0.999996 1L1.5 73C13.5 74.7793 29.5 74.5 42.5 73.5Z",
            ]
          : [
              `M2.14197 63.7287C1.37421 62.7526 1 61.5323 1 60.2904V10.4812C1 6.07651 5.6007 3.15817 9.74741 4.64347C16.1261 6.92824 23.5029 8.77046 33.1856 10.1406C36.2056 10.568 38.5 13.121 38.5 16.1711V75.4547C38.5 79.1496 35.1837 81.9854 31.5985 81.0916C19.5976 78.0996 9.00196 72.4502 2.14197 63.7287Z`,
              `M36.9964 73.8675C40.1105 73.6908 42.5168 71.1018 42.5386 67.9828L42.9563 8.24671C42.9802 4.83821 40.1633 2.09847 36.7554 2.16349C26.553 2.35816 16.2723 2.19851 7.74151 1.60522C4.15069 1.35548 1.02202 4.17015 1.04701 7.76956L1.46431 67.8604C1.48485 70.8184 3.65586 73.3324 6.60034 73.6151C16.0181 74.5193 27.0458 74.4322 36.9964 73.8675Z`,
            ],
        addStyles: [
          { transform: "translate(-2px, -13px)" },
          { transform: "translate(-5px, -3px)" },
        ],
      };
  },

  8: (length, isSquaredCorners) => {
    if (length >= 5) {
      const squaredCoor = [
        "M1 71V1C1 1 15.7473 8.17232 32.5 9.99522C60.7151 13.0654 83 12.3914 83 12.3914V94.8457C83 94.8457 45.086 96.1265 30.0968 91.3076C10.6989 85.0713 1 71 1 71Z",
      ];
      let coor = {
        addStyles: [{ transform: "translate(-2px, -14px)" }],
      };
      if (length > 7)
        coor.path = isSquaredCorners
          ? squaredCoor
          : [
              `M2.13193 72.4741C1.36398 71.531 1 70.3487 1 69.1325V10.5901C1 6.15851 5.70048 3.12074 9.87595 4.60537C15.7049 6.67793 23.8342 9.05227 32.5 9.99522C51.7852 12.0937 68.3 12.443 76.8218 12.4539C80.2066 12.4582 83 15.1908 83 18.5756V89.045C83 92.2798 80.4486 94.9248 77.214 94.966C66.0111 95.1085 41.463 94.9617 30.0968 91.3076C14.5249 86.3013 5.20327 76.246 2.13193 72.4741Z`,
              ,
            ];
      else if (length >= 5)
        coor.path = isSquaredCorners
          ? squaredCoor
          : [
              length === 5
                ? `M2.16605 73.1692C1.38984 72.3288 1 71.2211 1 70.0771V12.3615C1 8.24758 5.97158 5.51956 9.81455 6.98794C12.0601 7.84592 14.6591 8.63093 17.5214 9.13701C28.4352 11.0666 38.6705 12.1787 44.3585 12.7112C46.973 12.9559 49 15.1412 49 17.7671V86.7978C49 89.7056 46.5332 91.9878 43.6441 91.6586C36.7648 90.8749 25.0011 89.1459 19.0182 86.0206C10.4395 81.5391 4.53861 75.7379 2.16605 73.1692Z`
                : length === 6
                ? `M2.46488 73.9433C1.50343 73.0745 1 71.8293 1 70.5335V11.324C1 7.39807 5.47939 4.7413 9.16339 6.0982C12.3723 7.28012 16.3896 8.45039 20.9634 9.1273C34.7541 11.1683 47.6484 12.305 54.2999 12.8126C56.94 13.0141 59 15.2085 59 17.8562V87.804C59 90.6878 56.5716 92.9641 53.6996 92.703C45.6173 91.9682 30.3535 90.2064 22.7721 86.8913C12.4728 82.3877 5.36777 76.5664 2.46488 73.9433Z`
                : `M2.72012 75.0966C1.6032 74.2218 1 72.8712 1 71.4525V11.6579C1 7.86891 5.15388 5.2599 8.73487 6.49789C12.6783 7.86117 17.938 9.31186 24.0612 10.0983C40.4096 12.198 55.6675 13.1207 63.1601 13.4799C65.8606 13.6093 68 15.8297 68 18.5333V89.0264C68 91.894 65.6055 94.1667 62.7462 93.9483C53.6767 93.2555 35.1883 91.4842 26.1505 88.0547C14.2859 83.5525 6.09095 77.7365 2.72012 75.0966Z`,
            ];

      return coor;
    } else if (length <= 2)
      return {
        path: isSquaredCorners
          ? [
              "M1 71.5V1C5.42602 3.76626 10.9233 6.07339 18 8.00606V86.4839C10.9245 82.6933 5.02582 77.6729 1 71.5Z",
              "M17.5 4.00005V85.5001C11.6607 84.4052 6.08778 82.7109 1 80.4416V1.01904C5.80231 2.14675 11.2607 3.13348 17.5 4.00005Z",
              "M0.999996 1L0.999996 82.4748C6.80491 83.3302 13.1948 83.7719 20 83.9302L20 2.33648C12.9398 2.0876 6.37336 1.60858 0.999996 1Z",
              "M20 82.6281L20 1.24609C13.6948 1.54154 7.21294 1.58861 1 1.45138L1 82.9915C7.07933 83.0383 13.4504 82.8881 20 82.6281Z",
            ]
          : [
              `M1.83652 72.7285C1.27485 71.9377 1 70.9836 1 70.0136V10.0212C1 6.09406 5.41097 3.57111 9.05341 5.03923C10.6992 5.70258 12.4564 6.33153 14.3373 6.92811C16.4859 7.60961 18 9.56955 18 11.8237V78.1329C18 81.9116 13.9778 84.2803 10.963 82.0023C7.39865 79.3092 4.31146 76.2129 1.83652 72.7285Z`,
              `M13.1928 3.36276C15.6581 3.75072 17.5 5.85747 17.5 8.35311V79.4749C17.5 82.6056 14.6502 84.9769 11.6251 84.1706C9.00018 83.471 6.44929 82.643 3.99462 81.6891C2.1551 80.9742 1 79.17 1 77.1964V7.32869C1 4.10536 4.00672 1.72085 7.17348 2.32216C9.08771 2.68565 11.0923 3.03219 13.1928 3.36276Z`,
              `M6.57065 1.54696C3.59699 1.29519 1 3.61396 1 6.59826V78.1576C1 80.6375 2.81669 82.7519 5.2819 83.0214C8.35147 83.3569 11.5599 83.5949 14.8854 83.752C17.6892 83.8845 20 81.6195 20 78.8125V7.16333C20 4.47046 17.8666 2.26612 15.1773 2.12749C12.1584 1.97188 9.2691 1.77543 6.57065 1.54696Z`,
              `M15.1975 82.7988C17.8805 82.7154 20 80.5069 20 77.8226V6.48586C20 3.63256 17.6161 1.36164 14.7637 1.43492C11.8768 1.50908 8.9787 1.53582 6.11103 1.52112C3.30642 1.50674 1 3.7584 1 6.56304V78.0298C1 80.7762 3.21511 83.0115 5.96142 82.9882C8.98292 82.9626 12.0659 82.8962 15.1975 82.7988Z`,
            ],
        addStyles: [
          { transform: "translate(-2px, -15px)" },
          { transform: "translate(-5px, -7px)" },
          { transform: "translate(-9px, -4px)" },
          { transform: "translate(-12px, -1px)" },
        ],
      };
    else if (length < 5)
      return {
        path: isSquaredCorners
          ? [
              "M1 72V1.5C9 6.5 20.5 10 38.5 12.5V94C22.5 91 8.5 83.5 1 72Z",
              "M43 83.881V2C28 2.70718 12 2 0.999996 0.746509V82.7209C13 84.5002 27.5 84.5002 43 83.881Z",
            ]
          : [
              `M2.00949 73.47C1.32808 72.5264 1 71.3803 1 70.2164V12.3255C1 7.61287 6.31828 4.54666 10.7349 6.19048C16.7072 8.41329 24.0699 10.2302 33.331 11.7258C36.2874 12.2033 38.5 14.7295 38.5 17.7243V86.7704C38.5 90.5273 35.0771 93.3759 31.4627 92.3515C19.1152 88.852 8.50913 82.4706 2.00949 73.47Z`,
              `M37.2384 84.0815C40.4576 83.9871 43 81.336 43 78.1155V8.28911C43 4.86447 40.1382 2.13975 36.7144 2.21458C26.5054 2.43772 16.2205 2.07424 7.69128 1.38913C4.11998 1.10226 1 3.88584 1 7.46865V77.5445C1 80.5184 3.1761 83.0558 6.13418 83.3613C15.4593 84.3244 26.027 84.4101 37.2384 84.0815Z`,
            ],
        addStyles: [
          { transform: "translate(-2px, -15px)" },
          { transform: "translate(-5px, -3px)" },
        ],
      };
  },

  9: (length, isSquaredCorners) => {
    if (length >= 5) {
      const squaredCoor = [
        "M1 82.1731V1C1 1 17.2473 10.4735 34 12.5C62.2151 15.9131 83 15.1638 83 15.1638V106.828C83 106.828 45.086 108.252 30.0968 102.895C10.6989 95.9623 1 82.1731 1 82.1731Z",
      ];
      let coor = {
        addStyles: [{ transform: "translate(-2px, -16px)" }],
      };
      if (length > 7)
        coor.path = isSquaredCorners
          ? squaredCoor
          : [
              `M2.16298 83.6616C1.3754 82.7094 1 81.51 1 80.2743V11.4439C1 6.8137 6.11174 3.77023 10.3568 5.61923C16.5919 8.33505 25.2267 11.4387 34 12.5C52.9833 14.7964 68.6033 15.2085 76.7924 15.2324C80.1909 15.2423 83 17.9855 83 21.384V101.049C83 104.275 80.4625 106.916 77.2367 106.961C66.0443 107.12 41.4707 106.96 30.0968 102.895C14.577 97.3483 5.26574 87.4126 2.16298 83.6616Z`,
              ,
            ];
      else if (length >= 5)
        coor.path = isSquaredCorners
          ? squaredCoor
          : [
              length === 5
                ? `M1.98227 82.2694C1.32482 81.457 1 80.4403 1 79.3952V13.4377C1 9.18819 6.33738 6.43182 10.2594 8.0675C12.401 8.96062 14.8462 9.76861 17.5214 10.3019C28.4652 12.4834 38.7267 13.7382 44.4053 14.3365C46.9997 14.6099 49 16.7876 49 19.3964V98.4959C49 101.422 46.5037 103.709 43.6011 103.335C36.7159 102.449 24.9887 100.501 19.0182 96.9843C10.2087 91.7958 4.22311 85.0382 1.98227 82.2694Z`
                : length === 6
                ? `M2.24249 83.6676C1.41844 82.8126 1 81.668 1 80.4805V12.2876C1 8.22986 5.80128 5.54551 9.55701 7.08163C12.6984 8.36648 16.5747 9.6188 20.9634 10.3557C34.7828 12.6763 47.702 13.9666 54.3413 14.5407C56.9642 14.7676 59 16.9553 59 19.588V100.295C59 103.195 56.546 105.476 53.661 105.178C45.5688 104.342 30.3415 102.343 22.7721 98.5879C12.1992 93.3424 4.99261 86.5213 2.24249 83.6676Z`
                : `M2.49568 84.3834C1.51359 83.5081 1 82.2509 1 80.9353V12.5828C1 8.67972 5.41562 6.04618 9.05973 7.44421C12.9652 8.94252 18.1046 10.5122 24.0612 11.3738C40.4234 13.7408 55.6932 14.7798 63.179 15.1836C65.8715 15.3288 68 17.5468 68 20.2431V100.902C68 103.783 65.5842 106.06 62.7137 105.813C53.6326 105.03 35.1775 103.036 26.1505 99.1774C14.0137 93.9901 5.71674 87.2544 2.49568 84.3834Z`,
            ];

      return coor;
    } else if (length <= 2)
      return {
        path: isSquaredCorners
          ? [
              "M1 81.5V1.5C6.56672 4.68098 11.7118 7.15929 18 9.30744V97.869C10.7712 93.6079 4.78765 87.9931 1 81.5Z",
              "M17.5 5.49976V96.4998C11.7086 95.4139 6.11379 93.5419 1 91.0261V1.58252C5.65344 2.9672 10.9877 4.23348 17.5 5.49976Z",
              "M0.999996 0.844727L0.999996 92.2056C6.16301 93.1782 13.0393 93.7086 20 93.9074L20 2.23101C13.8064 2.01277 7.66748 1.53447 0.999996 0.844727Z",
              "M20 92.3447L20 0.844727C13.1565 1.28624 6.99533 1.43535 1 1.3351L1 92.9859C8.18093 93.0644 15.1175 92.8097 20 92.3447Z",
            ]
          : [
              `M1.70247 82.6547C1.22863 81.9069 1 81.0335 1 80.1483V10.1159C1 6.27678 5.15487 3.86467 8.62474 5.50745C10.5688 6.42787 12.5507 7.28236 14.639 8.08725C16.6344 8.85634 18 10.7446 18 12.8831V89.1177C18 92.9868 13.8156 95.3264 10.8361 92.8581C7.18381 89.8327 4.07539 86.3996 1.70247 82.6547Z`,
              `M13.4602 4.68278C15.8021 5.17678 17.5 7.22821 17.5 9.62167V90.4756C17.5 93.6063 14.6489 95.9763 11.6387 95.1161C8.95739 94.3499 6.34287 93.4161 3.82598 92.3301C2.07642 91.5752 1 89.8196 1 87.9141V8.28747C1 4.94283 4.22394 2.53185 7.47295 3.3259C9.35054 3.78478 11.3391 4.23536 13.4602 4.68278Z`,
              `M6.51838 1.37589C3.56497 1.11497 1 3.42373 1 6.38865V88.0595C1 90.464 2.7108 92.537 5.09553 92.8445C8.08445 93.23 11.4095 93.5092 14.8596 93.6965C17.6728 93.8492 20 91.5799 20 88.7626V7.05792C20 4.36503 17.867 2.16103 15.1783 2.00938C12.3308 1.84877 9.46299 1.63604 6.51838 1.37589Z`,
              `M15.4667 92.6825C18.0402 92.5348 20 90.3761 20 87.7983V6.17769C20 3.28961 17.5599 1.00781 14.6747 1.13577C11.7149 1.26703 8.86746 1.34034 6.08409 1.35973C3.29003 1.3792 1 3.62528 1 6.4194V88.0403C1 90.7804 3.20606 93.0156 5.94603 92.9882C9.34823 92.9541 12.5919 92.8474 15.4667 92.6825Z`,
            ],
        addStyles: [
          { transform: "translate(-2px, -15px)" },
          { transform: "translate(-5px, -8px)" },
          { transform: "translate(-9px, -4px)" },
          { transform: "translate(-12px, -1px)" },
        ],
      };
    else if (length < 5)
      return {
        path: isSquaredCorners
          ? [
              "M1 81.5V1.5C11.5 7.5 20.5 11 38.5 14.5V105.5C22.5 102.5 8 93.5 1 81.5Z",
              "M43 93.5V2C27.5 3 15.5 2.5 0.999996 1V92.3609C12.5 94.5271 32.5 94.5 43 93.5Z",
            ]
          : [
              `M1.84769 82.8821C1.27265 81.9889 1 80.9402 1 79.8779V11.8391C1 7.23214 5.98778 4.3386 10.1887 6.22971C16.6169 9.12345 23.6426 11.361 33.6541 13.511C36.4622 14.114 38.5 16.5736 38.5 19.4457V98.2704C38.5 102.027 35.0753 104.873 31.4828 103.774C18.9522 99.9405 8.0008 92.44 1.84769 82.8821Z`,
              `M37.5601 93.8872C40.6493 93.7273 43 91.1376 43 88.0443V8.39957C43 4.93387 40.0704 2.19755 36.6074 2.33606C26.3315 2.74707 17.3633 2.45289 7.62307 1.62682C4.07789 1.32616 1 4.0948 1 7.65271V87.3856C1 90.271 3.05153 92.7577 5.91632 93.102C15.5176 94.2559 28.2638 94.3686 37.5601 93.8872Z`,
            ],
        addStyles: [
          { transform: "translate(-2px, -17px)" },
          { transform: "translate(-5px, -4px)" },
        ],
      };
  },

  10: (length, isSquaredCorners) => {
    if (length >= 5) {
      const squaredCoor = [
        "M1 91.5967V2C1 2 13.9462 11.8666 31.5161 14.1034C61.1075 17.8707 87 17.6336 87 17.6336V118.811C87 118.811 47.2366 120.382 31.5161 114.469C11.172 106.817 1 91.5967 1 91.5967Z",
      ];
      let coor = {
        addStyles: [{ transform: "translate(-2px, -18px)" }],
      };
      if (length > 7)
        coor.path = isSquaredCorners
          ? squaredCoor
          : [
              `M2.0799 93.0608C1.35117 92.124 1 90.9632 1 89.7763V14.1166C1 9.15099 6.96335 5.96276 11.4526 8.08494C16.7174 10.5737 23.6538 13.1025 31.5161 14.1034C52.4877 16.7733 71.6015 17.432 80.9575 17.5891C84.2922 17.6451 87 20.3536 87 23.6888V113.043C87 116.265 84.4735 118.903 81.2524 118.954C69.6571 119.136 43.5465 118.994 31.5161 114.469C14.9991 108.256 5.18701 97.0553 2.0799 93.0608Z`,
              ,
            ];
      else if (length >= 5)
        coor.path = isSquaredCorners
          ? squaredCoor
          : [
              length === 5
                ? `M1.82272 90.9406C1.26856 90.1637 1 89.2346 1 88.2803V13.497C1 9.11262 6.7245 6.33376 10.7197 8.13951C12.749 9.05671 15.0359 9.87846 17.5214 10.4342C28.4975 12.8886 38.7873 14.2971 44.4555 14.9659C47.0281 15.2695 49 17.4389 49 20.0293V109.971C49 112.918 46.4716 115.209 43.5552 114.787C36.6639 113.79 24.9754 111.605 19.0182 107.669C9.99061 101.705 3.92843 93.8925 1.82272 90.9406Z`
                : length === 6
                ? `M2.06476 93.3868C1.35515 92.5546 1 91.4946 1 90.401V13.2704C1 9.08879 6.11669 6.38172 9.93265 8.09172C13.0054 9.46867 16.748 10.7924 20.9634 11.5842C34.8115 14.1855 47.7557 15.6295 54.3826 16.2697C56.988 16.5214 59 18.7025 59 21.32V112.786C59 115.703 56.5202 117.988 53.6226 117.652C45.5207 116.714 30.3295 114.479 22.7721 110.285C11.9629 104.286 4.67211 96.4443 2.06476 93.3868Z`
                : `M2.30033 93.3182C1.44382 92.4538 1 91.2788 1 90.0619V12.48C1 8.45903 5.69196 5.80157 9.39427 7.37021C13.2568 9.00672 18.2732 10.6954 24.0612 11.6344C40.4384 14.2914 55.7211 15.4564 63.1995 15.9083C65.8831 16.0705 68 18.2857 68 20.9742V112.646C68 115.542 65.5609 117.823 62.6787 117.544C53.5852 116.664 35.1659 114.427 26.1505 110.106C13.7599 104.167 5.37151 96.4175 2.30033 93.3182Z`,
            ];

      return coor;
    } else if (length <= 2)
      return {
        path: isSquaredCorners
          ? [
              "M1 1V90.5C4.53655 96.4849 10.5893 102.322 17.9504 106.851C17.5 107.5 17.9339 42.5642 17.9504 10.4359C11.5752 8.13234 7.14614 5.19055 1 1Z",
              "M17.5 3.99993V103.801C11.7554 102.795 6.13968 100.797 1 98.1397V0.735352C5.3124 1.96238 10.5597 3.00846 17.5 3.99993Z",
              "M0.999996 0.571289L0.999996 100.822C6.80491 102.031 13.1948 102.831 20 103.221L20 1.78625C13.8064 1.63361 7.66748 1.26103 0.999996 0.571289Z",
              "M20 102.071L20 0.571289C13.1565 0.792046 6.99533 0.915336 1 0.855092L1 102.402C7.07933 102.604 13.4504 102.494 20 102.071Z",
            ]
          : [
              `M8.92963 6.15699C5.46917 4.11682 1 6.44359 1 10.4607V89.1331C1 90.028 1.23312 90.9107 1.7193 91.662C4.53146 96.0072 8.63906 100.234 13.5742 103.893C15.8795 105.602 17.8138 104.478 17.7874 101.608C17.6464 86.2862 17.9123 40.99 17.9472 13.9385C17.9499 11.8313 16.6182 9.98179 14.6897 9.1326C12.6643 8.24074 10.7964 7.25755 8.92963 6.15699Z`,
              `M13.213 3.34544C15.6686 3.7472 17.5 5.84815 17.5 8.33641V97.8493C17.5 100.956 14.6893 103.318 11.7076 102.446C8.97917 101.649 6.30895 100.645 3.73674 99.4708C2.03595 98.6947 1 96.9656 1 95.0961V7.35649C1 4.03686 4.18239 1.61994 7.43403 2.28834C9.20822 2.65304 11.1251 3.00383 13.213 3.34544Z`,
              `M6.52036 1.08073C3.56509 0.841764 1 3.15029 1 6.11521V96.7561C1 99.1246 2.66 101.179 4.99529 101.574C8.10074 102.1 11.3499 102.518 14.7198 102.828C17.5816 103.092 20 100.8 20 97.9263V6.66454C20 3.95111 17.8355 1.73892 15.1247 1.61889C12.2955 1.4936 9.4458 1.31729 6.52036 1.08073Z`,
              `M15.3192 102.321C17.9531 102.21 20 100.02 20 97.3835V5.73517C20 2.91057 17.6617 0.649709 14.838 0.721025C11.8076 0.797561 8.89561 0.848301 6.05035 0.864628C3.26933 0.880586 1 3.12452 1 5.90559V97.5654C1 100.262 3.13864 102.48 5.83537 102.496C8.93625 102.516 12.1022 102.457 15.3192 102.321Z`,
            ],
        addStyles: [
          { transform: "translate(-2px, -17px)" },
          { transform: "translate(-5px, -7px)" },
          { transform: "translate(-9px, -4px)" },
          { transform: "translate(-12px, -1px)" },
        ],
      };
    else if (length < 5)
      return {
        path: isSquaredCorners
          ? [
              "M1 90.5V1C12 8.5 17.5 12 38.5 15V114.801C22.5 112 7.5 101.5 1 90.5Z",
              "M43 104V2.5C27.5 3 15.5 3 0.999996 1.5V101.75C13 104.25 27.5 105 43 104Z",
            ]
          : [
              `M1.86748 91.889C1.27713 90.992 1 89.9336 1 88.8598V12.3528C1 7.53231 6.34922 4.77164 10.5734 7.09407C16.279 10.231 22.4165 12.3579 33.3512 14.2023C36.2955 14.699 38.5 17.2179 38.5 20.2038V107.659C38.5 111.387 35.1239 114.221 31.5688 113.101C18.9509 109.125 7.71403 100.772 1.86748 91.889Z`,
              `M37.3818 104.288C40.5433 104.169 43 101.538 43 98.3746V8.69667C43 5.30715 40.1925 2.59539 36.804 2.67494C26.4467 2.91812 17.427 2.84294 7.62578 2.09625C4.07816 1.82598 1 4.5948 1 8.15271V96.8712C1 99.7132 2.99123 102.181 5.79669 102.635C15.2436 104.166 25.9815 104.717 37.3818 104.288Z`,
            ],

        addStyles: [
          { transform: "translate(-2px, -17px)" },
          { transform: "translate(-5px, -3px)" },
        ],
      };
  },

  11: (length, isSquaredCorners) => {
    if (length >= 5) {
      const squaredCoor = [
        "M1 97.4888V1C1 1 13.9462 9.83286 31.5161 12.2417C61.1075 16.2988 87 15.8791 87 15.8791V126.796C87 126.796 47.2366 128.489 31.5161 122.121C11.172 113.88 1 97.4888 1 97.4888Z",
      ];
      let coor = {
        addStyles: [{ transform: "translate(-2px, -15%)" }],
      };
      if (length > 7)
        coor.path = isSquaredCorners
          ? squaredCoor
          : [
              `M1.95659 98.894C1.30609 97.9848 1 96.8964 1 95.7784V12.3571C1 7.53574 6.60095 4.37991 11.0131 6.3238C16.3286 8.6657 23.4331 11.1335 31.5161 12.2417C52.4561 15.1127 71.5439 15.7419 80.9151 15.8644C84.2666 15.9082 87 18.6254 87 21.9771V121.046C87 124.26 84.4843 126.895 81.2704 126.949C69.6841 127.147 43.5527 126.997 31.5161 122.121C14.774 115.339 4.9208 103.037 1.95659 98.894Z`,
            ];
      else if (length >= 5)
        coor.path = isSquaredCorners
          ? squaredCoor
          : [
              length === 5
                ? `M1.70817 98.8271C1.23154 98.0852 1 97.2204 1 96.3386V13.3984C1 8.89856 7.07363 6.10426 11.1269 8.0587C13.0533 8.98759 15.2008 9.81403 17.5214 10.3852C28.5275 13.0943 38.8435 14.6459 44.5018 15.3796C47.054 15.7106 49 17.8721 49 20.4456V120.455C49 123.42 46.4415 125.715 43.5131 125.247C36.6164 124.147 24.9633 121.743 19.0182 117.419C9.8209 110.73 3.70156 101.93 1.70817 98.8271Z`
                : length === 6
                ? `M1.95532 98.1713C1.31554 97.3589 1 96.3561 1 95.322V11.8314C1 7.56615 6.3418 4.84815 10.1944 6.67836C13.217 8.11428 16.867 9.48239 20.9634 10.3102C34.8321 13.1127 47.7941 14.6665 54.4121 15.3537C57.0049 15.6229 59 17.7991 59 20.4059V119.556C59 122.485 56.5016 124.772 53.5953 124.41C45.4867 123.399 30.3211 120.995 22.7721 116.488C11.8077 109.942 4.46341 101.356 1.95532 98.1713Z`
                : `M2.29983 99.9047C1.53981 99.0566 1.15674 97.9583 1.15674 96.8195V10.9116C1.15674 6.79074 6.09647 4.11835 9.84211 5.83638C13.6705 7.59238 18.5908 9.38285 24.2469 10.3891C40.6625 13.3097 55.9798 14.5885 63.4588 15.0836C66.1344 15.2608 68.2411 17.4735 68.2411 20.155V121.794C68.2411 124.703 65.7811 126.986 62.8886 126.679C53.7752 125.711 35.3576 123.255 26.3389 118.515C13.7123 111.877 5.23653 103.181 2.29983 99.9047`,
            ];

      return coor;
    } else if (length <= 2)
      return {
        path: isSquaredCorners
          ? [
              "M1 97.5V2C5.75611 6.05655 10.5122 9.57811 18 12.5796V115.635C12.2592 111.286 6.93543 105.375 1 97.5Z",
              "M17 5.00013V111.5C10.9129 110.25 5.75119 108.273 1 105.368V1.04248C5.36422 2.49817 10.5734 3.8167 17 5.00013Z",
              "M0.999996 1.5L0.999996 108.5C6.16408 110.307 12.6069 111.448 20 112.129L20 3.03022C12.7119 2.75953 5.99358 2.22937 0.999996 1.5Z",
              "M20 111L20 0.978027C13.8744 1.2535 7.30799 1.299 1 1.15099L1 110.447C6.86599 110.846 13.2474 111 20 111Z",
            ]
          : [
              `M2.0131 98.8327C1.35221 97.971 1 96.9127 1 95.8268V12.8362C1 8.57019 6.04959 6.22882 9.6916 8.45024C11.2819 9.42025 12.9961 10.3486 14.8951 11.2356C16.7462 12.1004 18 13.9189 18 15.9621V105.574C18 109.706 13.3936 111.89 10.5338 108.908C7.74605 106.002 4.94873 102.66 2.0131 98.8327Z`,
              `M12.915 4.19551C15.2754 4.69232 17 6.7508 17 9.16298V105.368C17 108.534 14.0834 110.924 11.069 109.957C8.36433 109.089 5.83992 108.03 3.43506 106.756C1.89631 105.94 1 104.306 1 102.564V7.98056C1 4.56736 4.35225 2.13985 7.6603 2.98053C9.30702 3.39901 11.0547 3.80398 12.915 4.19551Z`,
              `M6.74229 2.18182C3.70737 1.88841 1 4.23429 1 7.28336V104.952C1 107.077 2.33812 108.989 4.38912 109.544C7.44412 110.371 10.849 111.018 14.5526 111.517C17.4688 111.91 20 109.59 20 106.647V7.84796C20 5.15875 17.8722 2.9571 15.187 2.80916C12.1882 2.64393 9.34263 2.43322 6.74229 2.18182Z`,
              `M15.0001 110.969C17.7613 111.004 20 108.761 20 106V6.20744C20 3.35785 17.622 1.08797 14.7733 1.15548C11.9168 1.22317 9.01015 1.24593 6.11801 1.22713C3.31073 1.20888 1 3.46185 1 6.2692V105.775C1 108.405 3.03667 110.59 5.66369 110.709C8.66655 110.845 11.7844 110.929 15.0001 110.969Z`,
            ],
        addStyles: [
          { transform: "translate(-2px, -19px)" },
          { transform: "translate(-5px, -7px)" },
          { transform: "translate(-9px, -3px)" },
          { transform: "translate(-12px, -2px)" },
        ],
      };
    else if (length < 5)
      return {
        path: isSquaredCorners
          ? [
              "M1 97.5V2C9 8.82331 17 14.133 38 18V124.5C22.5 121.316 13 113.421 1 97.5Z",
              "M43 113V2.47822C28.3253 3.13815 11.1205 2.47822 0.999996 1V107.5C10.1084 110.102 25.7952 113 43 113Z",
            ]
          : [
              `M2.21767 99.0988C1.42272 98.0663 1 96.7952 1 95.4921V15.0035C1 9.88423 7.08723 7.0588 11.565 9.53993C16.7665 12.4221 23.3552 14.9124 33.0931 17.0205C35.9222 17.6329 38 20.1014 38 22.996V117.142C38 120.941 34.4924 123.817 30.9046 122.568C19.8263 118.711 11.7364 111.463 2.21767 99.0988Z`,
              `M37.0004 112.885C40.3117 113.011 43 110.314 43 107V8.75411C43 5.33461 40.1472 2.61116 36.7283 2.67888C26.7138 2.87726 16.1835 2.53268 7.89056 1.78877C4.2463 1.46187 1 4.28115 1 7.94004V102.974C1 105.653 2.76989 108.019 5.37483 108.644C13.4185 110.575 24.6356 112.415 37.0004 112.885Z`,
            ],
        addStyles: [
          { transform: "translate(-2px, -20px)" },
          { transform: "translate(-5px, -3px)" },
        ],
      };
  },

  12: (length, isSquaredCorners) => {
    if (length >= 5) {
      const squaredCoor = [
        `M1 108.5V1.5C1 1.5 13.9462 11.2951 31.5161 13.9664C61.1075 18.4654 87 18 87 18V141C87 141 47.2366 142.877 31.5161 135.815C11.172 126.676 1 108.5 1 108.5Z`,
      ];
      let coor = {
        addStyles: [{ transform: "scaleY(.95)translate(-2px, -20px)" }],
      };
      if (length > 7)
        coor.path = isSquaredCorners
          ? squaredCoor
          : [
              `M1.80964 109.829C1.2582 108.964 1 107.961 1 106.935V13.5634C1 8.60751 6.92698 5.43533 11.3913 7.58732C16.6635 10.1288 23.6233 12.7664 31.5161 13.9664C52.4482 17.1489 71.5295 17.8473 80.9045 17.9835C84.2601 18.0323 87 20.7529 87 24.1088V135.277C87 138.48 84.5005 141.109 81.2973 141.17C69.7248 141.389 43.562 141.226 31.5161 135.815C14.4858 128.165 4.58362 114.181 1.80964 109.829Z`,
            ];
      else if (length >= 5)
        coor.path = isSquaredCorners
          ? squaredCoor
          : [
              length === 5
                ? `M1.54045 109.222C1.13582 108.52 0.943359 107.728 0.943359 106.918V14.4527C0.943359 9.83149 7.4063 7.02893 11.5143 9.1456C13.3346 10.0836 15.3427 10.9134 17.5 11.5C28.5701 14.5103 38.9437 16.2297 44.6004 17.0384C47.1288 17.3998 49.0456 19.5521 49.0456 22.1062V133.894C49.0456 136.881 46.4524 139.18 43.511 138.66C36.5951 137.439 24.9474 134.778 19 130C9.60257 122.45 3.41169 112.469 1.54045 109.222Z`
                : length === 6
                ? `M1.80448 109.71C1.26517 108.935 1 108.012 1 107.068V12.6924C1 8.29264 6.7149 5.559 10.6187 7.5885C13.5563 9.11572 17.0568 10.5515 20.9634 11.4364C34.8673 14.5859 47.86 16.3285 54.4624 17.0959C57.0334 17.3947 59 19.5624 59 22.1507V134.5C59 137.449 56.4695 139.741 53.5489 139.332C45.4289 138.195 30.3067 135.501 22.7721 130.458C11.5786 122.967 4.15814 113.093 1.80448 109.71Z`
                : `M2.15669 109.796C1.4909 108.972 1.15674 107.943 1.15674 106.883V11.6155C1.15674 7.38643 6.37468 4.70102 10.1611 6.58469C13.9423 8.46575 18.7467 10.3592 24.2469 11.4364C40.7929 14.6768 56.2232 16.428 63.6357 17.1599C66.2345 17.4165 68.2411 19.5949 68.2411 22.2063V134.57C68.2411 137.494 65.757 139.781 62.8532 139.441C53.7275 138.373 35.3459 135.67 26.3389 130.458C13.5004 123.029 4.95328 113.258 2.15669 109.796Z`,
            ];

      return coor;
    } else if (length <= 2)
      return {
        path: isSquaredCorners
          ? [
              "M1 107.5V2C5.50139 6.22005 10.0028 9.72758 16.82 12.7455V125.461C11.5234 121.287 6.52684 115.56 1 107.5Z",
              "M18 6V122C11.4833 120.528 6.02722 118.527 1 115.4V1.42432C5.56382 3.08809 11.0751 4.59836 18 6Z",
              "M1 0.848389L1 117.303C5.76106 118.8 12.3411 120.216 20 121.218L20 2.522C12.7115 2.23046 5.98575 1.65005 1 0.848389",
              "M19.5 121.674L19.5 1.4563C13.5359 1.75155 7.1489 1.80392 1 1.65137L1 120.692C6.76464 121.305 13.0235 121.674 19.5 121.674Z",
            ]
          : [
              `M1.88336 108.775C1.30424 107.948 1 106.96 1 105.95V13.5412C1 9.16395 6.33348 6.81514 10.0354 9.1509C11.2376 9.90945 12.5115 10.6397 13.8823 11.3442C15.6422 12.2485 16.82 14.0215 16.82 16.0001V115.155C16.82 119.33 12.1492 121.476 9.36993 118.36C6.92429 115.618 4.45757 112.45 1.88336 108.775Z`,
              `M14.0006 5.14375C16.3206 5.67023 18 7.71079 18 10.0898V115.745C18 118.951 15.0149 121.351 11.9605 120.377C8.90802 119.404 6.08494 118.237 3.4035 116.793C1.88225 115.974 1 114.35 1 112.622V8.56949C1 5.09794 4.4617 2.65875 7.80621 3.58925C9.72436 4.1229 11.7826 4.64044 14.0006 5.14375Z`,
              `M6.81786 1.60552C3.75671 1.28283 1 3.63869 1 6.71681V113.634C1 115.818 2.4137 117.76 4.52717 118.309C7.39907 119.056 10.7127 119.76 14.3656 120.377C17.3425 120.879 20 118.54 20 115.521V7.32624C20 4.64256 17.8806 2.444 15.2017 2.2837C12.2264 2.10567 9.40136 1.87786 6.81786 1.60552Z`,
              `M14.5005 121.601C17.2608 121.681 19.5 119.435 19.5 116.674V6.70969C19.5 3.85118 17.1078 1.57829 14.2502 1.65181C11.5677 1.72083 8.84097 1.74577 6.12488 1.72977C3.31495 1.71321 1 3.96673 1 6.77671V116.195C1 118.752 2.92828 120.905 5.47685 121.109C8.39497 121.343 11.4135 121.512 14.5005 121.601Z`,
            ],
        addStyles: [
          { transform: "translate(-2px, -21px)" },
          { transform: "translate(-6px, -9px)" },
          { transform: "scaleY(1.02) translate(-9px, -3px)" },
          { transform: "scaleY(1.02) translate(-12px, -2px)" },
        ],
      };
    else if (length < 5)
      return {
        path: isSquaredCorners
          ? [
              "M1 107V1.5C9 9 17 14.2495 38 18.5V134.5C22.5 131 13 124.5 1 107Z",
              "M42.5 123V2.78207C28 3.4999 11 2.78207 1 1.17417V117.628C10 120.459 25.5 123 42.5 123Z",
            ]
          : [
              `M2.06153 108.529C1.3645 107.538 1 106.352 1 105.14V15.3494C1 10.0968 7.44499 7.24314 12.0136 9.83502C17.1636 12.7567 23.6801 15.2455 33.1963 17.4585C35.977 18.1052 38 20.5524 38 23.4072V126.994C38 130.841 34.4111 133.73 30.7718 132.484C19.7012 128.692 11.61 122.099 2.06153 108.529Z`,
              `M36.5003 122.895C39.812 123.01 42.5 120.313 42.5 117V9.08611C42.5 5.65589 39.6299 2.92886 36.2005 3.00221C26.4058 3.21168 16.1214 2.84346 7.9826 2.04889C4.30634 1.68999 1 4.52189 1 8.21563V113.225C1 115.845 2.69348 118.177 5.23462 118.815C13.1732 120.81 24.2657 122.472 36.5003 122.895Z`,
            ],
        addStyles: [
          { transform: "translate(-2px, -21px)" },
          { transform: "translate(-5px, -3px)" },
        ],
      };
  },
};

export const getSvgMask = (width, length, squaredCorners) => {
  console.log("squared corners", squaredCorners);
  const { labelWidth, labelLength } = validateDimensions(width, length);
  const index = coordinates[labelWidth](labelLength, squaredCorners);

  let mask = {
    image:
      labelLength >= 12
        ? "logo-3"
        : labelLength >= 5
        ? "logo-1"
        : labelLength >= 3
        ? "logo-2"
        : "logo-4",
    path: index.path,
    addStyles: index.addStyles,
  };

  //console.log("length", length);
  // add width here rather than in obj for cleaner syntax
  if (labelLength >= 5)
    mask.addStyles[0].width = `${
      labelLength === 7
        ? 70
        : labelLength === 6
        ? 60
        : labelLength === 5
        ? 50
        : 88
    }px`;
  else if (labelLength === 4)
    (mask.addStyles[0].width = `${39}px`),
      (mask.addStyles[1].width = `${44}px`);
  else if (labelLength === 3)
    (mask.addStyles[0].width = `${33}px`),
      (mask.addStyles[1].width = `${35}px`);
  else if (labelLength === 2)
    (mask.addStyles[0].width = `${18}px`),
      (mask.addStyles[1].width = `${19}px`),
      (mask.addStyles[2].width = `${21}px`),
      (mask.addStyles[3].width = `${20}px`);
  else if (labelLength === 1)
    (mask.addStyles[0].width = `${13}px`),
      (mask.addStyles[1].width = `${13}px`),
      (mask.addStyles[2].width = `${14}px`),
      (mask.addStyles[3].width = `${14}px`);
  //console.log("mask", mask);
  return mask;
};

const transformation = {
  1: (length, orientation) => {
    if (length >= 15) {
      if (orientation === 1 || orientation === 2)
        return [{ transform: `scale(.9) skewY(10deg) translate(-4px, 10px)` }];
      else
        return [
          {
            transform: `rotateZ(10deg) skewX(8deg) translate(-8px, 8px)`,
            backgroundSize: "45%",
            backgroundPosition: "-0px 0px",
          },
        ];
    }
    if (length >= 7) {
      if (orientation === 1 || orientation === 2)
        return [{ transform: `scale(.87) skewY(10deg) translate(-6px, 9px)` }];
      else
        return [
          {
            transform: `rotateZ(4deg) skewX(8deg) translate(-3px, 7px)`,
            backgroundSize: "45%",
          },
        ];
    }
    if (length >= 5) {
      if (orientation === 1 || orientation === 2)
        return [{ transform: `scale(.87) skewY(12deg) translate(-2px, 8px)` }];
      else
        return [
          {
            transform: `rotateZ(6deg) skewX(6deg) translate(-1px, 6px)`,
            backgroundSize: "65%",
          },
        ];
    }
    if (length >= 3) {
      if (orientation === 1 || orientation === 2)
        return [
          {
            transform: `scale(.9) skewY(15deg) translate(0px, 7px)`,
          },
          {
            transform: `scale(.9) skewY(5deg) translate(0px, 1px)`,
          },
        ];
      else
        return [
          { transform: `rotateZ(12deg) skewX(10deg) translate(-1px, 5px)` },
          { transform: `rotateZ(3deg) skewX(8deg) translate(0px, 1px)` },
        ];
    }
    if (length < 3) {
      if (orientation === 1 || orientation === 2)
        return [
          {
            transform: `scale(.87) skewY(30deg) translate(0px, 4px)`,
          },
          { transform: `scale(.87) skewY(12deg) translate(0px, 2px)` },
          {
            transform: `scale(.87) skewY(12deg) translate(0px, 1px)`,
          },
          {
            transform: `scale(.87) skewY(0deg) translate(0px, 1px)`,
          },
        ];
      else
        return [
          { transform: `rotateZ(18deg) skewX(5deg) translate(1px, 3px)` },
          { transform: `rotateZ(7deg) skewX(7deg) translate(0px, 1.5px)` },
          { transform: `rotateZ(2deg) skewX(7deg) translate(0px, 1.5px)` },
          { transform: `rotateZ(0deg) skewX(5deg) translate(0px, 2px)` },
        ];
    }
  },
  2: (length, orientation) => {
    if (length >= 15) {
      if (orientation === 1 || orientation === 2)
        return [{ transform: `scale(.9) skewY(10deg) translate(-4px, 8px)` }];
      else
        return [
          {
            transform: `rotateZ(14deg) skewX(8deg) translate(-8px, 9px)`,
            backgroundSize: "90%",
            backgroundPosition: "-25px 0px",
          },
        ];
    }
    if (length >= 7) {
      if (orientation === 1 || orientation === 2)
        return [{ transform: `scale(.87) skewY(10deg) translate(-6px, 9px)` }];
      else
        return [
          {
            transform: `rotateZ(5deg) skewX(8deg) translate(-3px, 5px)`,
            backgroundSize: "80%",
          },
        ];
    }
    if (length >= 5) {
      if (orientation === 1 || orientation === 2)
        return [{ transform: `scale(.9) skewY(12deg) translate(0px, 6px)` }];
      else
        return [
          { transform: `rotateZ(9deg) skewX(6deg) translate(-1px, 3px)` },
        ];
    }
    if (length >= 3) {
      if (orientation === 1 || orientation === 2)
        return [
          {
            transform: `scale(.9) skewY(15deg) translate(0px, 5px)`,
          },
          {
            transform: `scale(.9) skewY(5deg) translate(0px, 1px)`,
          },
        ];
      else
        return [
          { transform: `rotateZ(14deg) skewX(10deg) translate(-1px, 3px)` },
          { transform: `rotateZ(3deg) skewX(8deg) translate(0px, 1px)` },
        ];
    }
    if (length < 3) {
      if (orientation === 1 || orientation === 2)
        return [
          {
            transform: `scale(.87) skewY(30deg) translate(0px, 1px)`,
          },
          { transform: `scale(.87) skewY(12deg) translate(0px, 1px)` },
          {
            transform: `scale(.87) skewY(12deg) translate(0px, 1px)`,
          },
          {
            transform: `scale(.87) skewY(0deg) translate(0px, 1px)`,
          },
        ];
      else
        return [
          { transform: `rotateZ(13deg) skewX(9deg) translate(0px, 0px)` },
          { transform: `rotateZ(7deg) skewX(7deg) translate(0px, 1px)` },
          { transform: `rotateZ(5deg) skewX(7deg) translate(0px, 1px)` },
          { transform: `rotateZ(3deg) skewX(5deg) translate(0px, 0px)` },
        ];
    }
  },
  3: (length, orientation) => {
    if (length >= 15) {
      if (orientation === 1 || orientation === 2)
        return [{ transform: `scale(.9) skewY(10deg) translate(-4px, 8px)` }];
      else
        return [
          {
            transform: `rotateZ(11deg) skewX(8deg) translate(-8px, 2px)`,
            backgroundSize: "110%",
            backgroundPosition: "-25px center",
          },
        ];
    }
    if (length >= 7) {
      if (orientation === 1 || orientation === 2)
        return [{ transform: `scale(.87) skewY(10deg) translate(-6px, 8px)` }];
      else
        return [
          { transform: `rotateZ(7deg) skewX(8deg) translate(-3px, 3px)` },
        ];
    }
    if (length >= 5) {
      if (orientation === 1 || orientation === 2)
        return [{ transform: `scale(.92) skewY(12deg) translate(0px, 5px)` }];
      else
        return [
          { transform: `rotateZ(9deg) skewX(6deg) translate(-1px, 3px)` },
        ];
    }
    if (length >= 3) {
      const translate = orientation === 1 ? 0.9 : 0.9;
      if (orientation === 1 || orientation === 2)
        return [
          {
            transform: `scale(.9) skewY(15deg) translate(0px, 3px)`,
          },
          {
            transform: `scale(.9) skewY(5deg) translate(0px, -1px)`,
          },
        ];
      else
        return [
          { transform: `rotateZ(11deg) skewX(10deg) translate(-1px, 2px)` },
          { transform: `rotateZ(4deg) skewX(8deg) translate(0px, -1px)` },
        ];
    }
    if (length < 3) {
      const scale = length === 2 ? 0.9 : 0.9;
      if (orientation === 1 || orientation === 2)
        return [
          {
            transform: `scale(${scale}) skewY(30deg) translate(0px, -1px)`,
          },
          {
            transform: `scale(${scale}) skewY(12deg) translate(0px, -1px)`,
          },
          {
            transform: `scale(${scale}) skewY(12deg) translate(0px, -1px)`,
          },
          {
            transform: `scale(${scale}) skewY(0deg) translate(0px, -1px)`,
          },
        ];
      else
        return [
          { transform: `rotateZ(12deg) skewX(9deg) translate(0px, -1px)` },
          { transform: `rotateZ(9deg) skewX(7deg) translate(0px, -1px)` },
          { transform: `rotateZ(5deg) skewX(7deg) translate(0px, -1px)` },
          { transform: `rotateZ(3deg) skewX(5deg) translate(0px, -1px)` },
        ];
    }
  },
  4: (length, orientation) => {
    if (length >= 15) {
      if (orientation === 1 || orientation === 2)
        return [{ transform: `scale(.95) skewY(10deg) translate(-4px, 4px)` }];
      else
        return [
          {
            transform: `rotateZ(8deg) skewX(8deg) translate(-8px, -1px)`,
            backgroundSize: "130%",
            backgroundPosition: "-25px center",
          },
        ];
    }
    if (length >= 7) {
      if (orientation === 1 || orientation === 2)
        return [{ transform: `scale(.95) skewY(10deg) translate(-4px, 4px)` }];
      else
        return [
          { transform: `rotateZ(7deg) skewX(8deg) translate(-3px, 1px)` },
        ];
    }
    if (length >= 5) {
      if (orientation === 1 || orientation === 2)
        return [{ transform: `scale(.92) skewY(12deg) translate(0px, 1px)` }];
      else
        return [
          { transform: `rotateZ(9deg) skewX(6deg) translate(-1px, 1px)` },
        ];
    }
    if (length >= 3) {
      const scale = length === 4 ? 0.95 : 0.95;
      if (orientation === 1 || orientation === 2)
        return [
          {
            transform: `scale(${scale}) skewY(15deg) translate(0px, -1px)`,
          },
          {
            transform: `scale(${scale}) skewY(5deg) translate(0px, -2px)`,
          },
        ];
      else
        return [
          { transform: `rotateZ(10deg) skewX(10deg) translate(-1px, -1px)` },
          { transform: `rotateZ(4deg) skewX(8deg) translate(0px, -3px)` },
        ];
    }
    if (length < 3) {
      const scale = length === 2 ? 0.95 : 0.9;
      if (orientation === 1 || orientation === 2)
        return [
          {
            transform: `scale(${scale}) skewY(30deg) translate(0px, -2px)`,
          },
          { transform: `scale(${scale}) skewY(12deg) translate(0px, -2px)` },
          {
            transform: `scale(${scale}) skewY(12deg) translate(0px, -2px)`,
          },
          {
            transform: `scale(${scale}) skewY(0deg) translate(0px, -2px)`,
          },
        ];
      else
        return [
          { transform: `rotateZ(14deg) skewX(11deg) translate(0px, -2px)` },
          { transform: `rotateZ(11deg) skewX(9deg) translate(0px, -2px)` },
          { transform: `rotateZ(5deg) skewX(7deg) translate(0px, -2px)` },
          { transform: `rotateZ(3deg) skewX(5deg) translate(0px, -3px)` },
        ];
    }
  },
  5: (length, orientation) => {
    const translate = orientation === 1 ? "4" : "6";
    if (length >= 15) {
      if (orientation === 1 || orientation === 2)
        return [{ transform: `skewY(10deg) translate(-4px, ${translate}px)` }];
      else
        return [
          {
            transform: `rotateZ(10deg) skewX(8deg) translate(-8px, -1px)`,
            backgroundSize: "130%",
            backgroundPosition: "-25px center",
          },
        ];
    }
    if (length >= 7) {
      const translate = orientation === 1 ? "2" : "4";
      if (orientation === 1 || orientation === 2)
        return [
          {
            transform: `scale(.95) skewY(10deg) translate(-4px, ${translate}px)`,
          },
        ];
      else
        return [
          { transform: `rotateZ(7deg) skewX(8deg) translate(-3px, 1px)` },
        ];
    }
    if (length >= 5) {
      const translate = orientation === 1 ? "1" : "3";
      if (orientation === 1 || orientation === 2)
        return [
          {
            transform: `scale(.92) skewY(12deg) translate(0px, ${translate}px)`,
          },
        ];
      else
        return [
          { transform: `rotateZ(10deg) skewX(6deg) translate(-1px, 1px)` },
        ];
    }
    if (length >= 3) {
      const scale = length === 4 ? 0.95 : 0.95;
      if (orientation === 1 || orientation === 2)
        return [
          {
            transform: `scale(${scale}) skewY(15deg) translate(0px, -1px)`,
          },
          {
            transform: `scale(${scale}) skewY(5deg) translate(0px, -2px)`,
          },
        ];
      else
        return [
          { transform: `rotateZ(11deg) skewX(10deg) translate(-1px, -2px)` },
          { transform: `rotateZ(5deg) skewX(8deg) translate(0px, -3px)` },
        ];
    }
    if (length < 3) {
      const scale = length === 2 ? 0.95 : 0.8;
      const translate = orientation === 1 ? "-5" : "-2";
      if (orientation === 1 || orientation === 2)
        return [
          {
            transform: `scale(${scale}) skewY(30deg) translate(0px, ${translate}px)`,
          },
          {
            transform: `scale(${scale}) skewY(12deg) translate(0px, ${translate}px)`,
          },
          {
            transform: `scale(${scale}) skewY(12deg) translate(0px,  ${translate}px)`,
          },
          {
            transform: `scale(${scale}) skewY(0deg) translate(0px,  ${translate}px)`,
          },
        ];
      else
        return [
          { transform: `rotateZ(16deg) skewX(11deg) translate(0px, -5px)` },
          { transform: `rotateZ(13deg) skewX(9deg) translate(0px, -5px)` },
          { transform: `rotateZ(7deg) skewX(7deg) translate(0px, -4px)` },
          { transform: `rotateZ(4deg) skewX(5deg) translate(0px, -4px)` },
        ];
    }
  },
  6: (length, orientation) => {
    if (length >= 15) {
      const translate = orientation === 1 ? "4" : "6";
      if (orientation === 1 || orientation === 2)
        return [{ transform: `skewY(10deg) translate(-4px, ${translate}px)` }];
      else
        return [
          {
            transform: `rotateZ(10deg) skewX(8deg) translate(-8px, -1px)`,
            backgroundSize: "130%",
            backgroundPosition: "-25px center",
          },
        ];
    }
    if (length >= 7) {
      const translate = orientation === 1 ? "2" : "5";
      if (orientation === 1 || orientation === 2)
        return [
          {
            transform: `scale(.95) skewY(10deg) translate(-4px, ${translate}px)`,
          },
        ];
      else
        return [
          { transform: `rotateZ(8deg) skewX(8deg) translate(-3px, 1px)` },
        ];
    }
    if (length >= 5) {
      const translate = orientation === 1 ? "-1" : "2";
      if (orientation === 1 || orientation === 2)
        return [
          {
            transform: `scale(.92) skewY(12deg) translate(0px, ${translate}px)`,
          },
        ];
      else
        return [
          {
            transform: `rotateZ(10deg) skewX(6deg) translate(-1px, ${translate}px)`,
          },
        ];
    }
    if (length >= 3) {
      const scale = length === 4 ? 0.95 : 0.95;
      const translate = orientation === 1 ? ["-1", "-4"] : ["1", "-1"];
      if (orientation === 1 || orientation === 2)
        return [
          {
            transform: `scale(${scale}) skewY(15deg) translate(0px, ${translate[0]}px)`,
          },
          {
            transform: `scale(${scale}) skewY(5deg) translate(0px, ${translate[1]}px)`,
          },
        ];
      else
        return [
          { transform: `rotateZ(13deg) skewX(10deg) translate(-1px, -2px)` },
          { transform: `rotateZ(6deg) skewX(8deg) translate(0px, -3px)` },
        ];
    }
    if (length < 3) {
      const scale = length === 2 ? 0.95 : 0.8;
      const translate = orientation === 1 ? "-5" : "-3";
      if (orientation === 1 || orientation === 2)
        return [
          {
            transform: `scale(${scale}) skewY(30deg) translate(0px, ${translate}px)`,
          },
          {
            transform: `scale(${scale}) skewY(12deg) translate(0px, ${translate}px)`,
          },
          {
            transform: `scale(${scale}) skewY(12deg) translate(0px, ${translate}px)`,
          },
          {
            transform: `scale(${scale}) skewY(0deg) translate(0px, ${translate}px)`,
          },
        ];
      else
        return [
          { transform: `rotateZ(16deg) skewX(11deg) translate(0px, -5px)` },
          { transform: `rotateZ(13deg) skewX(9deg) translate(0px, -5px)` },
          { transform: `rotateZ(7deg) skewX(7deg) translate(0px, -4px)` },
          { transform: `rotateZ(4deg) skewX(5deg) translate(0px, -4px)` },
        ];
    }
  },
  7: (length, orientation) => {
    if (length >= 15) {
      const translate = orientation === 1 ? "3" : "6";
      if (orientation === 1 || orientation === 2)
        return [{ transform: `skewY(10deg) translate(-4px, ${translate}px)` }];
      else
        return [
          {
            transform: `rotateZ(11deg) skewX(8deg) translate(-8px, -1px)`,
            backgroundSize: "130%",
            backgroundPosition: "-25px center",
          },
        ];
    }
    if (length >= 7) {
      const translate = orientation === 1 ? "4" : "6";
      if (orientation === 1 || orientation === 2)
        return [{ transform: ` skewY(13deg) translate(-4px, ${translate}px)` }];
      else
        return [
          { transform: `rotateZ(10deg) skewX(8deg) translate(-3px, 1px)` },
        ];
    }
    if (length >= 5) {
      const translate = orientation === 1 ? "1" : "3";
      if (orientation === 1 || orientation === 2)
        return [{ transform: ` skewY(15deg) translate(0px, ${translate}px)` }];
      else
        return [
          { transform: `rotateZ(12deg) skewX(6deg) translate(-1px, 1px)` },
        ];
    }
    if (length >= 3) {
      const scale = length === 4 ? 0.95 : 0.95;
      if (orientation === 1 || orientation === 2)
        return [
          {
            transform: `scale(${scale}) skewY(20deg) translate(0px, -1px)`,
          },
          {
            transform: `scale(${scale}) skewY(8deg) translate(0px, -4px)`,
          },
        ];
      else
        return [
          { transform: `rotateZ(14deg) skewX(10deg) translate(-1px, -2px)` },
          { transform: `rotateZ(6deg) skewX(8deg) translate(0px, -5px)` },
        ];
    }
    if (length < 3) {
      const scale = length === 2 ? 1.2 : 0.9;
      const translate = orientation === 1 ? ["-6", "-6"] : ["-2", "-4"];
      if (orientation === 1 || orientation === 2)
        return [
          {
            transform: `scale(${scale}) skewY(30deg) translate(0px, ${translate[0]}px)`,
          },
          {
            transform: `scale(${scale * 0.95}) skewY(20deg) translate(0px, ${
              translate[0]
            }px)`,
          },
          {
            transform: `scale(${scale * 0.87}) skewY(15deg) translate(0px, ${
              translate[1]
            }px)`,
          },
          {
            transform: `scale(${scale * 0.9}) skewY(0deg) translate(0px, ${
              translate[1]
            }px)`,
          },
        ];
      else
        return [
          { transform: `rotateZ(18deg) skewX(11deg) translate(-1px, -6px)` },
          { transform: `rotateZ(13deg) skewX(9deg) translate(0px, -7px)` },
          { transform: `rotateZ(8deg) skewX(7deg) translate(0px, -7px)` },
          { transform: `rotateZ(4deg) skewX(5deg) translate(0px, -6px)` },
        ];
    }
  },
  8: (length, orientation) => {
    if (length >= 15) {
      const translate = orientation === 1 ? "3" : "6";
      if (orientation === 1 || orientation === 2)
        return [{ transform: `skewY(10deg) translate(-4px, ${translate}px)` }];
      else
        return [
          {
            transform: `rotateZ(11deg) skewX(8deg) translate(-8px, -1px)`,
            backgroundSize: "130%",
            backgroundPosition: "-25px center",
          },
        ];
    }
    if (length >= 7) {
      const translate = orientation === 1 ? "2" : "5";
      if (orientation === 1 || orientation === 2)
        return [{ transform: ` skewY(15deg) translate(0px, ${translate}px)` }];
      else
        return [
          { transform: `rotateZ(10deg) skewX(8deg) translate(-3px, 1px)` },
        ];
    }
    if (length >= 5) {
      const translate = orientation === 1 ? "1" : "3";
      if (orientation === 1 || orientation === 2)
        return [{ transform: ` skewY(15deg) translate(0px, ${translate}px)` }];
      else
        return [
          { transform: `rotateZ(13deg) skewX(6deg) translate(-1px, 0px)` },
        ];
    }
    if (length >= 3) {
      const scale = length === 4 ? 0.95 : 0.95;
      const translate = orientation === 1 ? ["-1", "-8"] : ["1", "-5"];
      if (orientation === 1 || orientation === 2)
        return [
          {
            transform: `scale(${scale}) skewY(30deg) translate(0px, ${translate[0]}px)`,
          },
          {
            transform: `scale(${scale}) skewY(8deg) translate(0px, ${translate[1]}px)`,
          },
        ];
      else
        return [
          { transform: `rotateZ(16deg) skewX(10deg) translate(-1px, -2px)` },
          { transform: `rotateZ(7deg) skewX(8deg) translate(0px, -6px)` },
        ];
    }
    if (length < 3) {
      const scale = length === 2 ? 1.2 : 0.8;
      const translate = orientation === 1 ? ["-7", "-6"] : ["-5", "-3"];
      if (orientation === 1 || orientation === 2)
        return [
          {
            transform: `scale(${scale}) skewY(30deg) translate(0px, ${translate[0]}px)`,
          },
          {
            transform: `scale(${scale}) skewY(20deg) translate(0px, ${translate[0]}px)`,
          },
          {
            transform: `scale(${scale * 0.95}) skewY(15deg) translate(0px, ${
              translate[1]
            }px)`,
          },
          {
            transform: `scale(${scale}) skewY(0deg) translate(0px, ${translate[1]}px)`,
          },
        ];
      else
        return [
          { transform: `rotateZ(22deg) skewX(11deg) translate(-1px, -5px)` },
          { transform: `rotateZ(15deg) skewX(9deg) translate(0px, -7px)` },
          { transform: `rotateZ(10deg) skewX(7deg) translate(-1px, -7px)` },
          { transform: `rotateZ(5deg) skewX(5deg) translate(0px, -6px)` },
        ];
    }
  },
  9: (length, orientation) => {
    if (length >= 15) {
      const translate = orientation === 1 ? "4" : "7";
      if (orientation === 1 || orientation === 2)
        return [{ transform: `skewY(10deg) translate(-4px, ${translate}px)` }];
      else
        return [
          {
            transform: `rotateZ(12deg) skewX(8deg) translate(-8px, -1px)`,
            backgroundSize: "130%",
            backgroundPosition: "-25px center",
          },
        ];
    }
    if (length >= 7) {
      const translate = orientation === 1 ? "2" : "6";
      if (orientation === 1 || orientation === 2)
        return [{ transform: ` skewY(15deg) translate(0px, ${translate}px)` }];
      else
        return [
          { transform: `rotateZ(10deg) skewX(8deg) translate(-3px, 1px)` },
        ];
    }
    if (length >= 5) {
      const translate = orientation === 1 ? "-1" : "3";
      if (orientation === 1 || orientation === 2)
        return [{ transform: ` skewY(20deg) translate(0px, ${translate}px)` }];
      else
        return [
          { transform: `rotateZ(13deg) skewX(6deg) translate(-1px, 0px)` },
        ];
    }
    if (length >= 3) {
      const scale = length === 4 ? 0.95 : 0.95;
      const translate = orientation === 1 ? ["-1", "-7"] : ["2", "-3"];
      if (orientation === 1 || orientation === 2)
        return [
          {
            transform: `scale(${scale}) skewY(30deg) translate(0px, ${translate[0]}px)`,
          },
          {
            transform: `scale(${scale}) skewY(8deg) translate(0px, ${translate[1]}px)`,
          },
        ];
      else
        return [
          { transform: `rotateZ(18deg) skewX(10deg) translate(-1px, -3px)` },
          { transform: `rotateZ(8deg) skewX(8deg) translate(0px, -7px)` },
        ];
    }
    if (length < 3) {
      const scale = length === 2 ? 1.2 : 0.8;
      const translate = orientation === 1 ? ["-7", "-6"] : ["-5", "-4"];
      if (orientation === 1 || orientation === 2)
        return [
          {
            transform: `scale(${scale}) skewY(30deg) translate(0px, ${translate[0]}px)`,
          },
          {
            transform: `scale(${scale}) skewY(20deg) translate(0px,  ${translate[0]}px)`,
          },
          {
            transform: `scale(${scale * 0.9}) skewY(15deg) translate(0px, ${
              translate[1]
            }px)`,
          },
          {
            transform: `scale(${scale}) skewY(0deg) translate(0px,  ${translate[1]}px)`,
          },
        ];
      else
        return [
          { transform: `rotateZ(24deg) skewX(9deg) translate(-2px, -8px)` },
          { transform: `rotateZ(18deg) skewX(9deg) translate(-1px, -9px)` },
          { transform: `rotateZ(10deg) skewX(7deg) translate(-1px, -9px)` },
          { transform: `rotateZ(5deg) skewX(5deg) translate(0px, -8px)` },
        ];
    }
  },
  10: (length, orientation) => {
    if (length >= 15) {
      const translate = orientation === 1 ? "3" : "8";
      if (orientation === 1 || orientation === 2)
        return [{ transform: `skewY(10deg) translate(-4px, ${translate}px)` }];
      else
        return [
          {
            transform: `rotateZ(13deg) skewX(8deg) translate(-8px, -3px)`,
            backgroundSize: "130%",
            backgroundPosition: "-25px center",
          },
        ];
    }
    if (length >= 7) {
      const translate = orientation === 1 ? "3" : "7";
      if (orientation === 1 || orientation === 2)
        return [{ transform: ` skewY(15deg) translate(0px, ${translate}px)` }];
      else
        return [{ transform: `rotateZ(10deg) skewX(5deg) translateX(-3px)` }];
    }
    if (length >= 5) {
      const translate = orientation === 1 ? "0" : "5";
      if (orientation === 1 || orientation === 2)
        return [{ transform: ` skewY(20deg) translate(0px, ${translate}px)` }];
      else
        return [
          { transform: `rotateZ(14deg) skewX(6deg) translate(-1px, 0px)` },
        ];
    }
    if (length >= 3) {
      const scale = length === 4 ? 0.95 : 1;
      const translate = orientation === 1 ? ["-3", "-11"] : ["0", "-4"];
      if (orientation === 1 || orientation === 2)
        return [
          {
            transform: `scale(${scale}) skewY(20deg) translate(0px, ${translate[0]}px)`,
          },
          {
            transform: `scale(${scale}) skewY(4deg) translate(0px, ${translate[1]}px)`,
          },
        ];
      else
        return [
          { transform: `rotateZ(18deg) skewX(10deg) translate(-1px, -3px)` },
          { transform: `rotateZ(8deg) skewX(8deg) translate(0px, -9px)` },
        ];
    }
    if (length < 3) {
      const scale = length === 2 ? 1.2 : 0.8;

      if (orientation === 1 || orientation === 2)
        return [
          {
            transform: `scale(${scale}) skewY(30deg) translate(0px, -7px)`,
          },
          {
            transform: `scale(${scale}) skewY(20deg) translate(0px, -7px)`,
          },
          {
            transform: `scale(${
              scale * 0.9
            }) skewY(15deg) translate(0px, -6px)`,
          },
          {
            transform: `scale(${scale}) skewY(0deg) translate(0px, -6px)`,
          },
        ];
      else
        return [
          { transform: `rotateZ(27deg) skewX(5deg) translate(-3px, -7px)` },
          { transform: `rotateZ(20deg) skewX(7deg) translate(-3px, -11px)` },
          { transform: `rotateZ(10deg) skewX(7deg) translate(-1px, -10px)` },
          { transform: `rotateZ(5deg) skewX(5deg) translate(0px, -8px)` },
        ];
    }
  },
  11: (length, orientation) => {
    if (length >= 15) {
      const translate = orientation === 1 ? "0" : "4";
      if (orientation === 1 || orientation === 2)
        return [{ transform: `skewY(10deg) translate(0px, ${translate}px)` }];
      else
        return [
          {
            transform: `rotateZ(13deg) skewX(8deg) translate(-8px, -3px)`,
            backgroundSize: "130%",
            backgroundPosition: "-25px center",
          },
        ];
    }
    if (length >= 7) {
      const translate = orientation === 1 ? "-1" : "3";
      if (orientation === 1 || orientation === 2)
        return [{ transform: ` skewY(15deg) translate(0px, ${translate}px)` }];
      else
        return [{ transform: `rotateZ(10deg) skewX(5deg) translateX(-3px)` }];
    }
    if (length >= 5) {
      const scale = length === 4 ? "-3" : "-2";
      if (orientation === 1 || orientation === 2)
        return [{ transform: ` skewY(20deg) translate(0px, ${scale}px)` }];
      else
        return [
          { transform: `rotateZ(14deg) skewX(6deg) translate(-1px, -2px)` },
        ];
    }
    if (length >= 3) {
      const scale = length === 4 ? 0.95 : 0.95;
      const translate = orientation === 1 ? ["-3", "-12"] : ["0", "-7"];
      if (orientation === 1 || orientation === 2)
        return [
          {
            transform: `scale(${scale}) skewY(30deg) translate(0px, ${translate[0]}px)`,
          },
          {
            transform: `scale(${scale}) skewY(10deg) translate(0px, ${translate[1]}px)`,
          },
        ];
      else
        return [
          { transform: `rotateZ(18deg) skewX(10deg) translate(-1px, -3px)` },
          { transform: `rotateZ(8deg) skewX(8deg) translate(0px, -10px)` },
        ];
    }
    if (length < 3) {
      const scale = length === 2 ? 1.1 : 0.8;
      const translate =
        orientation === 1
          ? ["-11", "-13", "-11", "-12"]
          : ["-9", "-11", "-9", "-8"];
      if (orientation === 1 || orientation === 2)
        return [
          {
            transform: `scale(${scale}) skewY(30deg) translate(0px, ${translate[0]}px)`,
          },
          {
            transform: `scale(${scale}) skewY(20deg) translate(0px, ${translate[1]}px)`,
          },
          {
            transform: `scale(${scale}) skewY(15deg) translate(0px, ${translate[2]}px)`,
          },
          {
            transform: `scale(${scale}) skewY(0deg) translate(0px, ${translate[3]}px)`,
          },
        ];
      else
        return [
          { transform: `rotateZ(27deg) skewX(5deg) translate(-3px, -7px)` },
          { transform: `rotateZ(20deg) skewX(7deg) translate(-3px, -11px)` },
          { transform: `rotateZ(10deg) skewX(7deg) translate(-1px, -10px)` },
          { transform: `rotateZ(5deg) skewX(5deg) translate(0px, -10px)` },
        ];
    }
  },
  12: (length, orientation) => {
    if (length >= 15) {
      const translate = orientation === 1 ? "2" : "6";
      if (orientation === 1 || orientation === 2)
        return [{ transform: `skewY(10deg) translate(0px, ${translate}px)` }];
      else
        return [
          {
            transform: `rotateZ(14deg) skewX(8deg) translate(-8px, -3px)`,
            backgroundSize: "130%",
            backgroundPosition: "-25px center",
          },
        ];
    }
    if (length >= 7) {
      const translate = orientation === 1 ? "1" : "6";
      if (orientation === 1 || orientation === 2)
        return [{ transform: `skewY(15deg) translate(0px, ${translate}px)` }];
      else
        return [{ transform: `rotateZ(10deg) skewX(5deg) translateX(-3px)` }];
    }
    if (length >= 5) {
      const translate = orientation === 1 ? "-1" : "2";
      if (orientation === 1 || orientation === 2)
        return [{ transform: ` skewY(20deg) translate(0px, ${translate}px)` }];
      else
        return [
          { transform: `rotateZ(14deg) skewX(5deg) translate(-1px, 2px)` },
        ];
    }
    if (length >= 3) {
      const scale = length === 4 ? 0.95 : 1;
      const translate = orientation === 1 ? ["-5", "-11"] : ["-1", "-9"];
      if (orientation === 1 || orientation === 2)
        return [
          {
            transform: `scale(${scale}) skewY(30deg) translate(0px, ${translate[0]}px)`,
          },
          {
            transform: `scale(${scale}) skewY(10deg) translate(0px, ${translate[1]}px)`,
          },
        ];
      else
        return [
          {
            transform: `rotateZ(20deg) skewX(10deg) translate(-1px, -2px)`,
          },
          {
            transform: `rotateZ(8deg) skewX(5deg) translate(0px, -10px)`,
          },
        ];
    }
    if (length < 3) {
      const scale = length === 2 ? 1.1 : 0.8;
      if (orientation === 1 || orientation === 2)
        return [
          {
            transform: `scale(${scale}) skewY(30deg) translate(0px, -7px)`,
          },
          { transform: `scale(${scale}) skewY(20deg) translate(0px, -9px)` },
          { transform: `scale(${scale}) skewY(15deg) translate(0px, -11px)` },
          { transform: `scale(${scale}) skewY(0deg) translate(0px, -12px)` },
        ];
      else
        return [
          { transform: `rotateZ(27deg) skewX(5deg) translate(-3px, -7px)` },
          { transform: `rotateZ(20deg) skewX(7deg) translate(-2px, -10px)` },
          { transform: `rotateZ(10deg) skewX(7deg) translate(-1px, -11px)` },
          { transform: `rotateZ(5deg) skewX(5deg) translate(0px, -10px)` },
        ];
    }
  },
};

export const transformMask = (width, length, orientation) => {
  const { labelWidth, labelLength } = validateDimensions(width, length);
  const transform = transformation[labelWidth](labelLength, orientation);

  console.log(transform);

  return transform;
};

const roundCoor = {
  1: (length, orientation) => {
    if (length > 12)
      return {
        label:
          length >= 13 && length <= 15
            ? [{ transform: "translate(-2px, -3px) skewY(3deg)" }]
            : [{ transform: "translate(-2px, -3px) skewY(3deg)" }],
        design: [
          {
            height: "105%",
            width: "90%",
            transform: "rotate(0deg) translate(-50%, 3px)",
          },
        ],
        orientation: [
          {
            width: length >= 13 && length <= 15 ? "25%" : "20%",
            rotate: length >= 13 && length <= 15 ? "5deg" : "5deg",
            transform: "skew(0deg)",
            translate: length >= 13 && length <= 15 ? `-1px -3px` : `-1px -3px`,
          },
        ],
        straightLabelStyles: { translate: "-55% 0px" },
      };
    if (length >= 8)
      return {
        label: [{ transform: "translateY(-1%) skewY(3deg)" }],
        design: [{ height: "96%", width: "80%" }],
        orientation: [
          {
            width: length <= 10 ? "55%" : "35%",
            rotate: "0deg",
            transform: "skew(5deg)",
            translate: `-1px 0px`,
          },
        ],
        straightLabelStyles: { translate: "-20% 0px" },
      };
    else if (length >= 5)
      return {
        label: [{ transform: "translateY(-2px) skewY(2deg)" }],
        design: [{ height: "96%", width: "95%" }],
        orientation: [
          {
            width: "65%",
            rotate: "2deg",
            transform: "skew(5deg)",
            translate: `-1px 1px`,
          },
        ],
        straightLabelStyles: { translate: "-3px 0px" },
      };
    else if (length >= 3)
      return {
        label: [
          { transform: "translateY(-3px) skewY(3deg)" },
          { translate: "-3px 14%" },
        ],
        design: [{ height: "95%" }, {}],
        orientation: [
          {
            width: "70%",
            rotate: "0deg",
            transform: "skew(0deg)",
            translate: `-1px 0px`,
          },
          { width: "70%", rotate: "3deg", transform: "skew(5deg)" },
        ],
        straightLabelStyles: { translate: "-18% 0px" },
      };
    else if (length <= 2)
      return length === 2
        ? {
            label: [
              { translate: "0px 5%" },
              { translate: "-4px 10%" },
              { translate: "-7px 15%" },
              { translate: "-10px 15%" },
            ],
            design: [
              { height: "90%" },
              { height: "100%" },
              { height: "100%" },
              { height: "100%" },
            ],
            orientation: [
              {
                rotate: "10deg",
                transform: "skew(15deg)",
                translate: `-1px 0px`,
              },
              { rotate: "5deg", transform: "skew(15deg)" },
              { rotate: "2deg" },
              {},
            ],
            straightLabelStyles: { translate: "-50% 0px" },
          }
        : {
            label: [
              { translate: "0px -2px" },
              { translate: "-4px 0px" },
              { translate: "-7px 12%" },
              { translate: "-10px 15%" },
            ],
            design: [
              { height: "90%" },
              { height: "95%" },
              { height: "100%" },
              { height: "100%" },
            ],
            orientation: [
              {
                rotate: "10deg",
                transform: "skew(5deg)",
                translate: `-1px 0px`,
              },
              { rotate: "5deg", transform: "skew(15deg)" },
              { rotate: "5deg" },
              {},
            ],
            straightLabelStyles: { translate: "-90% 0px" },
          };
  },
  2: (length, orientation) => {
    if (length > 12)
      return {
        label:
          length >= 13 && length <= 15
            ? [{ transform: "translate(-2px, -3px) skewY(5deg)" }]
            : [{ transform: "translate(-2px, -3px) skewY(5deg)" }],
        design: [
          {
            height: "95%",
            width: "90%",
            transform: "rotate(0deg) translate(-50%, 3px)",
          },
        ],
        orientation: [
          {
            width:
              orientation === 4
                ? length >= 13 && length <= 15
                  ? "50%"
                  : "35%"
                : length >= 13 && length <= 15
                ? "60%"
                : "40%",
            rotate:
              orientation === 4
                ? length >= 13 && length <= 15
                  ? "4deg"
                  : "7deg"
                : length >= 13 && length <= 15
                ? "2deg"
                : "5deg",
            transform: "skew(1deg)",
            translate: length >= 13 && length <= 15 ? `-1px -3px` : `-1px -3px`,
          },
        ],
        straightLabelStyles: { translate: "-55% 0px" },
      };
    if (length >= 8)
      return {
        label: [{ transform: "translateY(-1%) skewY(3deg)" }],
        design: [{ height: "96%", width: "80%" }],
        orientation: [
          {
            width: length <= 10 ? "80%" : "65%",
            rotate: "2deg",
            transform: "skew(5deg)",
            translate: `-1px 0px`,
          },
        ],
        straightLabelStyles: { translate: "-20% 0px" },
      };
    else if (length >= 5)
      return {
        label: [{ transform: "translateY(-3%) skewY(5deg)" }],
        design: [{ height: "96%", width: "95%" }],
        orientation: [
          {
            width: "85%",
            rotate: "2deg",
            transform: "skew(5deg)",
            translate: `-1px 0px`,
          },
        ],
        straightLabelStyles: { translate: "-3px 0px" },
      };
    else if (length >= 3)
      return {
        label: [
          { transform: "translateY(-7%) skewY(7deg)" },
          { translate: "-3px 14%" },
        ],
        design: [{ height: "95%" }, {}],
        orientation: [
          {
            rotate: "0deg",
            transform: "skew(0deg)",
            translate: `-1px 0px`,
          },
          { rotate: "3deg", transform: "skew(5deg)" },
        ],
        straightLabelStyles: { translate: "-18% 0px" },
      };
    else if (length <= 2)
      return length === 2
        ? {
            label: [
              { translate: "0px 5%" },
              { translate: "-4px 10%" },
              { translate: "-7px 15%" },
              { translate: "-10px 15%" },
            ],
            design: [
              { height: "90%" },
              { height: "100%" },
              { height: "100%" },
              { height: "100%" },
            ],
            orientation: [
              {
                rotate: "10deg",
                transform: "skew(15deg)",
                translate: `-1px 0px`,
              },
              { rotate: "5deg", transform: "skew(15deg)" },
              { rotate: "2deg" },
              {},
            ],
            straightLabelStyles: { translate: "-50% 0px" },
          }
        : {
            label: [
              { translate: "0px 5%" },
              { translate: "-4px 10%" },
              { translate: "-7px 12%" },
              { translate: "-10px 15%" },
            ],
            design: [
              { height: "90%" },
              { height: "95%" },
              { height: "100%" },
              { height: "100%" },
            ],
            orientation: [
              {
                rotate: "10deg",
                transform: "skew(5deg)",
                translate: `-1px 0px`,
              },
              { rotate: "5deg", transform: "skew(15deg)" },
              { rotate: "5deg" },
              {},
            ],
            straightLabelStyles: { translate: "-90% 0px" },
          };
  },
  3: (length, orientation) => {
    if (length > 12)
      return {
        label:
          length >= 13 && length <= 15
            ? [{ transform: "translate(-2px, -3px) skewY(5deg)" }]
            : [{ transform: "translate(-2px, -3px) skewY(5deg)" }],
        design: [
          {
            height: "95%",
            width: "90%",
            transform: "rotate(2deg) translate(-50%, 5px)",
          },
        ],
        orientation: [
          {
            width:
              orientation === 4
                ? length >= 13 && length <= 15
                  ? "80%"
                  : "65%"
                : length >= 13 && length <= 15
                ? "83%"
                : "70%",
            rotate: "4deg",
            transform: "skew(5deg)",
            translate: length >= 13 && length <= 15 ? `-1px -3px` : `-1px -5px`,
          },
        ],
        straightLabelStyles: { translate: "-55% 0px" },
      };
    if (length >= 8)
      return {
        label: [{ transform: "translateY(-1%) skewY(3deg)" }],
        design: [{ height: "96%", width: "80%" }],
        orientation: [
          {
            width: "90%",
            rotate: "2deg",
            transform: "skew(5deg)",
            translate: `-1px 0px`,
          },
        ],
        straightLabelStyles: { translate: "-20% 0px" },
      };
    else if (length >= 5)
      return {
        label: [{ transform: "translateY(-3%) skewY(5deg)" }],
        design: [{ height: "96%", width: "95%" }],
        orientation: [
          {
            rotate: "2deg",
            transform: "skew(5deg)",
            translate: `-1px 0px`,
          },
        ],
        straightLabelStyles: { translate: "-3px 0px" },
      };
    else if (length >= 3)
      return {
        label: [
          { transform: "translateY(-7%) skewY(7deg)" },
          { translate: "-3px 14%" },
        ],
        design: [{ height: "95%" }, {}],
        orientation: [
          {
            rotate: "0deg",
            transform: "skew(0deg)",
            translate: `-1px 0px`,
          },
          { rotate: "3deg", transform: "skew(5deg)" },
        ],
        straightLabelStyles: { translate: "-18% 0px" },
      };
    else if (length <= 2)
      return length === 2
        ? {
            label: [
              { translate: "0px 5%" },
              { translate: "-4px 10%" },
              { translate: "-7px 15%" },
              { translate: "-10px 15%" },
            ],
            design: [
              { height: "90%" },
              { height: "100%" },
              { height: "100%" },
              { height: "100%" },
            ],
            orientation: [
              {
                rotate: "10deg",
                transform: "skew(15deg)",
                translate: `-1px 0px`,
              },
              { rotate: "5deg", transform: "skew(15deg)" },
              { rotate: "2deg" },
              {},
            ],
            straightLabelStyles: { translate: "-50% 0px" },
          }
        : {
            label: [
              { translate: "0px 5%" },
              { translate: "-4px 10%" },
              { translate: "-7px 12%" },
              { translate: "-10px 15%" },
            ],
            design: [
              { height: "90%" },
              { height: "95%" },
              { height: "100%" },
              { height: "100%" },
            ],
            orientation: [
              {
                rotate: "20deg",
                transform: "skew(15deg)",
                translate: `-1px 0px`,
              },
              { rotate: "10deg", transform: "skew(15deg)" },
              { rotate: "5deg" },
              {},
            ],
            straightLabelStyles: { translate: "-90% 0px" },
          };
  },
  4: (length, orientation) => {
    if (length > 12)
      return {
        label:
          length >= 13 && length <= 15
            ? [{ transform: "translate(-2px, -3px) skewY(5deg)" }]
            : [{ transform: "translate(-2px, -3px) skewY(5deg)" }],
        design: [
          {
            height: "95%",
            width: "90%",
            transform: "rotate(2deg) translate(-50%, 5px)",
          },
        ],
        orientation: [
          {
            width: length >= 13 && length <= 15 ? "83%" : "75%",
            rotate: "2deg",
            transform: "skew(0deg)",
            translate: `-1px 0px`,
          },
        ],
        straightLabelStyles: { translate: "-55% 0px" },
      };
    if (length >= 8)
      return {
        label: [{ transform: "translateY(-1%) skewY(3deg)" }],
        design: [{ height: "96%", width: "80%" }],
        orientation: [
          {
            width: "90%",
            rotate: "2deg",
            transform: "skew(5deg)",
            translate: `-1px 0px`,
          },
        ],
        straightLabelStyles: { translate: "-20% 0px" },
      };
    else if (length >= 5)
      return {
        label: [{ transform: "translateY(-3%) skewY(5deg)" }],
        design: [{ height: "96%", width: "95%" }],
        orientation: [
          {
            rotate: "2deg",
            transform: "skew(5deg)",
            translate: `-1px 0px`,
          },
        ],
        straightLabelStyles: { translate: "-3px 0px" },
      };
    else if (length >= 3)
      return {
        label: [
          { transform: "translateY(-7%) skewY(5deg)" },
          { translate: "-3px 14%" },
        ],
        design: [{ height: "95%" }, {}],
        orientation: [
          {
            rotate: "5deg",
            transform: "skew(0deg)",
            translate: `-1px 0px`,
          },
          { rotate: "3deg", transform: "skew(5deg)" },
        ],
        straightLabelStyles: { translate: "-18% 0px" },
      };
    else if (length <= 2)
      return length === 2
        ? {
            label: [
              { translate: "0px 5%" },
              { translate: "-4px 10%" },
              { translate: "-7px 15%" },
              { translate: "-10px 15%" },
            ],
            design: [
              { height: "90%" },
              { height: "100%" },
              { height: "100%" },
              { height: "100%" },
            ],
            orientation: [
              {
                rotate: "15deg",
                transform: "skew(15deg)",
                translate: `-1px 0px`,
              },
              { rotate: "5deg", transform: "skew(15deg)" },
              { rotate: "2deg" },
              {},
            ],
            straightLabelStyles: { translate: "-50% 0px" },
          }
        : {
            label: [
              { translate: "0px 5%" },
              { translate: "-4px 10%" },
              { translate: "-7px 12%" },
              { translate: "-10px 15%" },
            ],
            design: [
              { height: "90%" },
              { height: "95%" },
              { height: "100%" },
              { height: "100%" },
            ],
            orientation: [
              {
                rotate: "20deg",
                transform: "skew(15deg)",
                translate: `-1px 0px`,
              },
              { rotate: "10deg", transform: "skew(15deg)" },
              { rotate: "5deg" },
              {},
            ],
            straightLabelStyles: { translate: "-90% 0px" },
          };
  },
  5: (length, orientation) => {
    if (length > 12)
      return {
        label:
          length >= 13 && length <= 15
            ? [{ transform: "translate(-2px, -5px) skewY(5deg)" }]
            : [{ transform: "translate(-2px, -3px) skewY(5deg)" }],
        design: [
          {
            height: "95%",
            width: "90%",
            transform: "rotate(2deg) translate(-50%, 5px)",
          },
        ],
        orientation: [
          {
            width: orientation === 4 ? "85%" : "90%",
            rotate: "2deg",
            transform: "skew(2deg)",
            translate: `-1px 0px`,
          },
        ],
        straightLabelStyles: { translate: "-55% 0px" },
      };
    if (length >= 8)
      return {
        label: [{ transform: "translateY(-1%) skewY(5deg)" }],
        design: [{ height: "96%", width: "80%" }],
        orientation: [
          {
            rotate: "2deg",
            transform: "skew(5deg)",
            translate: `-1px 0px`,
          },
        ],
        straightLabelStyles: { translate: "-20% 0px" },
      };
    else if (length >= 5)
      return {
        label: [{ transform: "translateY(-3%) skewY(5deg)" }],
        design: [{ height: "96%", width: "95%" }],
        orientation: [
          {
            width: orientation === 4 ? "95%" : "100%",
            rotate: "5deg",
            transform: "skew(5deg)",
            translate: `-1px 0px`,
          },
        ],
        straightLabelStyles: { translate: "-3px 0px" },
      };
    else if (length >= 3)
      return {
        label: [
          { transform: "translateY(-7%) skewY(5deg)" },
          { translate: "-3px 14%" },
        ],
        design: [{ height: "95%" }, {}],
        orientation: [
          {
            rotate: "5deg",
            transform: "skew(0deg)",
            translate: `-1px 0px`,
          },
          { rotate: "3deg", transform: "skew(5deg)" },
        ],
        straightLabelStyles: { translate: "-18% 0px" },
      };
    else if (length <= 2)
      return length === 2
        ? {
            label: [
              { translate: "0px 5%" },
              { translate: "-4px 10%" },
              { translate: "-7px 15%" },
              { translate: "-10px 15%" },
            ],
            design: [
              { height: "90%" },
              { height: "100%" },
              { height: "100%" },
              { height: "100%" },
            ],
            orientation: [
              {
                rotate: "15deg",
                transform: "skew(15deg)",
                translate: `-1px 0px`,
              },
              { rotate: "10deg", transform: "skew(15deg)" },
              { rotate: "5deg" },
              {},
            ],
            straightLabelStyles: { translate: "-50% 0px" },
          }
        : {
            label: [
              { translate: "0px 5%" },
              { translate: "-4px 10%" },
              { translate: "-7px 12%" },
              { translate: "-10px 15%" },
            ],
            design: [
              { height: "90%" },
              { height: "95%" },
              { height: "100%" },
              { height: "100%" },
            ],
            orientation: [
              {
                rotate: "20deg",
                transform: "skew(15deg)",
                translate: `-1px 0px`,
              },
              { rotate: "15deg", transform: "skew(15deg)" },
              { rotate: "10deg" },
              {},
            ],
            straightLabelStyles: { translate: "-90% 0px" },
          };
  },
  6: (length, orientation) => {
    if (length > 12)
      return {
        label:
          length >= 13 && length <= 15
            ? [{ transform: "translate(-2px, -13px) skewY(3deg)" }]
            : [{ transform: "translate(-2px, -10px) skewY(5deg)" }],
        design: [
          {
            height: "85%",
            width: "90%",
            transform: "rotate(3deg) translate(-50%, 15px)",
          },
        ],
        orientation: [
          {
            width: orientation === 4 ? "85%" : "90%",
            rotate: "2deg",
            transform: "skew(0deg)",
            translate: `-1px 0px`,
          },
        ],
        straightLabelStyles: { translate: "-55% 0px" },
      };
    if (length >= 8)
      return {
        label: [{ transform: "translateY(-1%) skewY(5deg)" }],
        design: [{ height: "96%", width: "80%" }],
        orientation: [
          {
            width: orientation === 4 ? "95%" : "100%",
            rotate: "2deg",
            transform: "skew(5deg)",
            translate: `-1px 0px`,
          },
        ],
        straightLabelStyles: { translate: "-20% 0px" },
      };
    else if (length >= 5)
      return {
        label: [{ transform: "translateY(-3%) skewY(5deg)" }],
        design: [{ height: "96%", width: "95%" }],
        orientation: [
          {
            rotate: "5deg",
            transform: "skew(5deg)",
            translate: `-1px 0px`,
          },
        ],
        straightLabelStyles: { translate: "-3px 0px" },
      };
    else if (length >= 3)
      return {
        label: [
          { transform: "translateY(-7%) skewY(5deg)" },
          { translate: "-3px 14%" },
        ],
        design: [{ height: "95%" }, {}],
        orientation: [
          {
            rotate: "5deg",
            transform: "skew(0deg)",
            translate: `-1px 0px`,
          },
          { rotate: "3deg", transform: "skew(5deg)" },
        ],
        straightLabelStyles: { translate: "-10% 0px" },
      };
    else if (length <= 2)
      return length === 2
        ? {
            label: [
              { translate: "0px 5%" },
              { translate: "-4px 10%" },
              { translate: "-7px 15%" },
              { translate: "-10px 15%" },
            ],
            design: [
              { height: "90%" },
              { height: "100%" },
              { height: "100%" },
              { height: "100%" },
            ],
            orientation: [
              {
                rotate: "15deg",
                transform: "skew(15deg)",
                translate: `-1px 0px`,
              },
              { rotate: "10deg", transform: "skew(15deg)" },
              { rotate: "5deg" },
              {},
            ],
            straightLabelStyles: { translate: "-50% 0px" },
          }
        : {
            label: [
              { translate: "0px 5%" },
              { translate: "-4px 10%" },
              { translate: "-7px 12%" },
              { translate: "-10px 15%" },
            ],
            design: [
              { height: "90%" },
              { height: "95%" },
              { height: "100%" },
              { height: "100%" },
            ],
            orientation: [
              {
                rotate: "20deg",
                transform: "skew(15deg)",
                translate: `-1px 0px`,
              },
              { rotate: "15deg", transform: "skew(15deg)" },
              { rotate: "10deg" },
              {},
            ],
            straightLabelStyles: { translate: "-90% 0px" },
          };
  },
  7: (length, orientation) => {
    if (length > 12)
      return {
        label:
          length >= 13 && length <= 15
            ? [{ transform: "translate(-2px, -13px) skewY(5deg)" }]
            : [{ transform: "translate(-2px, -10px) skewY(5deg)" }],
        design: [
          {
            height: "85%",
            width: "90%",
            transform: "rotate(3deg) translate(-50%, 15px)",
          },
        ],
        orientation: [
          {
            width: orientation === 4 ? "88%" : "95%",
            rotate: "2deg",
            transform: "skew(2deg)",
            translate: `-1px 0px`,
          },
        ],
        straightLabelStyles: { translate: "-55% 0px" },
      };
    if (length >= 8)
      return {
        label: [{ transform: "translateY(-1%) skewY(5deg)" }],
        design: [{ height: "96%", width: "80%" }],
        orientation: [
          {
            width: orientation === 4 ? "95%" : "100%",
            rotate: "2deg",
            transform: "skew(5deg)",
            translate: `-1px 0px`,
          },
        ],
        straightLabelStyles: { translate: "-20% 0px" },
      };
    else if (length >= 5)
      return {
        label: [{ transform: "translateY(-3%) skewY(5deg)" }],
        design: [{ height: "96%", width: "95%" }],
        orientation: [
          {
            rotate: "5deg",
            transform: "skew(5deg)",
            translate: `-1px 0px`,
          },
        ],
        straightLabelStyles: { translate: "-3px 0px" },
      };
    else if (length >= 3)
      return {
        label: [
          { transform: "translateY(-7%) skewY(8deg)" },
          { translate: "-6px 14%" },
        ],
        design: [{ width: "85%", height: "95%" }, {}],
        orientation: [
          {
            width: orientation === 4 ? "95%" : "100%",
            rotate: "3deg",
            transform: "skew(0deg)",
            translate: `-1px 0px`,
          },
          { rotate: "3deg", transform: "skew(5deg)" },
        ],
        straightLabelStyles: { translate: "-12% 0px" },
      };
    else if (length <= 2)
      return length === 2
        ? {
            label: [
              { translate: "0px 5%" },
              { translate: "-4px 10%" },
              { translate: "-7px 15%" },
              { translate: "-10px 15%" },
            ],
            design: [
              { height: "90%" },
              { height: "100%" },
              { height: "100%" },
              { height: "100%" },
            ],
            orientation: [
              {
                rotate: "15deg",
                transform: "skew(15deg)",
                translate: `-1px 0px`,
              },
              { rotate: "10deg", transform: "skew(15deg)" },
              { rotate: "5deg" },
              {},
            ],
            straightLabelStyles: { translate: "-50% 0px" },
          }
        : {
            label: [
              { translate: "0px 5%" },
              { translate: "-4px 10%" },
              { translate: "-7px 12%" },
              { translate: "-10px 15%" },
            ],
            design: [
              { height: "90%" },
              { height: "95%" },
              { height: "100%" },
              { height: "100%" },
            ],
            orientation: [
              {
                rotate: "20deg",
                transform: "skew(15deg)",
                translate: `-1px 0px`,
              },
              { rotate: "15deg", transform: "skew(15deg)" },
              { rotate: "10deg" },
              {},
            ],
            straightLabelStyles: { translate: "-90% 0px" },
          };
  },
  8: (length, orientation) => {
    if (length > 12)
      return {
        label:
          length >= 13 && length <= 15
            ? [{ transform: "translate(-2px, -10px) skewY(5deg)" }]
            : [{ transform: "translate(-2px, -7px) skewY(5deg)" }],
        design: [
          {
            height: "85%",
            width: "90%",
            transform: "rotate(5deg) translate(-50%, 15px)",
          },
        ],
        orientation: [
          {
            width: orientation === 4 ? "83%" : "90%",
            rotate: "5deg",
            transform: "skew(5deg)",
            translate: `-1px 0px`,
          },
        ],
        straightLabelStyles: { translate: "-55% 0px" },
      };
    if (length >= 8)
      return {
        label: [{ transform: "translateY(-1%) skewY(5deg)" }],
        design: [{ height: "96%", width: "80%" }],
        orientation: [
          {
            width: orientation === 4 ? "90%" : "100%",
            rotate: "3deg",
            transform: "skew(5deg)",
            translate: `-1px 0px`,
          },
        ],
        straightLabelStyles: { translate: "-20% 0px" },
      };
    else if (length >= 5)
      return {
        label: [{ transform: "translateY(-3%) skewY(5deg)" }],
        design: [{ height: "96%", width: "95%" }],
        orientation: [
          {
            rotate: "5deg",
            transform: "skew(5deg)",
            translate: `-1px 0px`,
          },
        ],
        straightLabelStyles: { translate: "-3px 0px" },
      };
    else if (length >= 3)
      return {
        label: [
          { transform: "translateY(-7%) skewY(10deg)" },
          { translate: "-3px 14%" },
        ],
        design: [{ height: "95%" }, {}],
        orientation: [
          {
            rotate: "5deg",
            transform: "skew(5deg)",
            translate: `-1px 0px`,
          },
          { rotate: "5deg", transform: "skew(5deg)" },
        ],
        straightLabelStyles: { translate: "-10% 0px" },
      };
    else if (length <= 2)
      return length === 2
        ? {
            label: [
              { translate: "0px 5%" },
              { translate: "-4px 10%" },
              { translate: "-7px 15%" },
              { translate: "-10px 15%" },
            ],
            design: [
              { height: "90%" },
              { height: "100%" },
              { height: "100%" },
              { height: "100%" },
            ],
            orientation: [
              {
                rotate: "20deg",
                transform: "skew(15deg)",
                translate: `-1px 0px`,
              },
              { rotate: "15deg", transform: "skew(15deg)" },
              { rotate: "10deg" },
              {},
            ],
            straightLabelStyles: { translate: "-50% 0px" },
          }
        : {
            label: [
              { translate: "0px 5%" },
              { translate: "-4px 10%" },
              { translate: "-7px 12%" },
              { translate: "-10px 15%" },
            ],
            design: [
              { height: "90%" },
              { height: "95%" },
              { height: "100%" },
              { height: "100%" },
            ],
            orientation: [
              {
                rotate: "20deg",
                transform: "skew(15deg)",
                translate: `-1px 0px`,
              },
              { rotate: "15deg", transform: "skew(15deg)" },
              { rotate: "10deg" },
              {},
            ],
            straightLabelStyles: { translate: "-90% 0px" },
          };
  },
  9: (length, orientation) => {
    if (length > 12)
      return {
        label:
          length >= 13 && length <= 15
            ? [{ transform: "translate(-2px, -10px) skewY(5deg)" }]
            : [{ transform: "translate(-2px, -7px) skewY(5deg)" }],
        design: [
          {
            height: "85%",
            width: "90%",
            transform: "rotate(7deg) translate(-50%, 15px)",
          },
        ],
        orientation: [
          {
            width: orientation === 4 ? "90%" : "100%",
            rotate: "5deg",
            transform: "skew(5deg)",
            translate: `-1px 0px`,
          },
        ],
        straightLabelStyles: { translate: "-55% 0px" },
      };
    if (length >= 8)
      return {
        label: [{ transform: "translateY(-1%) skewY(5deg)" }],
        design: [{ height: "96%", width: "80%" }],
        orientation: [
          {
            rotate: "5deg",
            transform: "skew(5deg)",
            translate: `-1px 0px`,
          },
        ],
        straightLabelStyles: { translate: "-20% 0px" },
      };
    else if (length >= 5)
      return {
        label: [{ transform: "translateY(-3%) skewY(5deg)" }],
        design: [{ height: "96%", width: "95%" }],
        orientation: [
          {
            rotate: "5deg",
            transform: "skew(5deg)",
            translate: `-1px 0px`,
          },
        ],
        straightLabelStyles: { translate: "-3px 0px" },
      };
    else if (length >= 3)
      return {
        label: [
          { transform: "translateY(-7%) skewY(10deg)" },
          { translate: "-3px 14%" },
        ],
        design: [{ height: "95%" }, {}],
        orientation: [
          {
            rotate: "5deg",
            transform: "skew(5deg)",
            translate: `-1px 0px`,
          },
          { rotate: "5deg", transform: "skew(5deg)" },
        ],
        straightLabelStyles: { translate: "-10% 0px" },
      };
    else if (length <= 2)
      return length === 2
        ? {
            label: [
              { translate: "0px 5%" },
              { translate: "-4px 10%" },
              { translate: "-7px 15%" },
              { translate: "-10px 15%" },
            ],
            design: [
              { height: "90%" },
              { height: "100%" },
              { height: "100%" },
              { height: "100%" },
            ],
            orientation: [
              {
                rotate: "20deg",
                transform: "skew(15deg)",
                translate: `-1px 0px`,
              },
              { rotate: "15deg", transform: "skew(15deg)" },
              { rotate: "10deg" },
              {},
            ],
            straightLabelStyles: { translate: "-50% 0px" },
          }
        : {
            label: [
              { translate: "0px 5%" },
              { translate: "-4px 10%" },
              { translate: "-7px 12%" },
              { translate: "-10px 15%" },
            ],
            design: [
              { height: "90%" },
              { height: "95%" },
              { height: "100%" },
              { height: "100%" },
            ],
            orientation: [
              {
                rotate: "20deg",
                transform: "skew(15deg)",
                translate: `-1px 0px`,
              },
              { rotate: "15deg", transform: "skew(15deg)" },
              { rotate: "10deg" },
              {},
            ],
            straightLabelStyles: { translate: "-90% 0px" },
          };
  },
  10: (length, orientation) => {
    if (length > 12)
      return {
        label:
          length >= 13 && length <= 15
            ? [{ transform: "translate(-2px, -10px) skewY(5deg)" }]
            : [{ transform: "translate(-2px, -7px) skewY(5deg)" }],
        design: [
          {
            height: "85%",
            width: "90%",
            transform: "rotate(7deg) translate(-50%, 15px)",
          },
        ],
        orientation: [
          {
            width: orientation === 4 ? "90%" : "100%",
            rotate: "5deg",
            transform: "skew(5deg)",
            translate: `-1px 0px`,
          },
        ],
        straightLabelStyles: { translate: "-55% 0px" },
      };
    if (length >= 8)
      return {
        label: [{ transform: "translateY(-1%) skewY(5deg)" }],
        design: [{ height: "96%", width: "80%" }],
        orientation: [
          {
            rotate: "5deg",
            transform: "skew(5deg)",
            translate: `-1px 0px`,
          },
        ],
        straightLabelStyles: { translate: "-20% 0px" },
      };
    else if (length >= 5)
      return {
        label: [{ transform: "translateY(-3%) skewY(5deg)" }],
        design: [{ height: "96%", width: "95%" }],
        orientation: [
          {
            rotate: "5deg",
            transform: "skew(5deg)",
            translate: `-1px 0px`,
          },
        ],
        straightLabelStyles: { translate: "-3px 0px" },
      };
    else if (length >= 3)
      return {
        label: [
          { transform: "translateY(-7%) skewY(10deg)" },
          { translate: "-3px 14%" },
        ],
        design: [{ height: "95%" }, {}],
        orientation: [
          {
            rotate: "5deg",
            transform: "skew(5deg)",
            translate: `-1px 0px`,
          },
          { rotate: "5deg", transform: "skew(5deg)" },
        ],
        straightLabelStyles: { translate: "-10% 0px" },
      };
    else if (length <= 2)
      return length === 2
        ? {
            label: [
              { translate: "0px 5%" },
              { translate: "-4px 10%" },
              { translate: "-7px 15%" },
              { translate: "-10px 15%" },
            ],
            design: [
              { height: "90%" },
              { height: "100%" },
              { height: "100%" },
              { height: "100%" },
            ],
            orientation: [
              {
                rotate: "20deg",
                transform: "skew(15deg)",
                translate: `-1px 0px`,
              },
              { rotate: "15deg", transform: "skew(15deg)" },
              { rotate: "10deg" },
              {},
            ],
            straightLabelStyles: { translate: "-50% 0px" },
          }
        : {
            label: [
              { translate: "0px 5%" },
              { translate: "-4px 10%" },
              { translate: "-7px 12%" },
              { translate: "-10px 15%" },
            ],
            design: [
              { height: "90%" },
              { height: "95%" },
              { height: "100%" },
              { height: "100%" },
            ],
            orientation: [
              {
                rotate: "20deg",
                transform: "skew(15deg)",
                translate: `-1px 0px`,
              },
              { rotate: "15deg", transform: "skew(15deg)" },
              { rotate: "10deg" },
              {},
            ],
            straightLabelStyles: { translate: "-90% 0px" },
          };
  },
  11: (length, orientation) => {
    if (length > 12)
      return {
        label:
          length >= 13 && length <= 15
            ? [{ transform: "translate(-2px, -14px) skewY(5deg)" }]
            : [{ transform: "translate(-2px, -10px) skewY(5deg)" }],
        design: [
          {
            height: "85%",
            width: "90%",
            transform: "rotate(7deg) translate(-50%, 15px)",
          },
        ],
        orientation: [
          {
            width: orientation === 4 ? "90%" : "100%",
            rotate: "5deg",
            transform: "skew(5deg)",
            translate: `-1px 0px`,
          },
        ],
        straightLabelStyles: { translate: "-55% 0px" },
      };
    if (length >= 8)
      return {
        label: [{ transform: "translateY(-1%) skewY(5deg)" }],
        design: [{ height: "96%", width: "80%" }],
        orientation: [
          {
            rotate: "5deg",
            transform: "skew(5deg)",
            translate: `-1px 0px`,
          },
        ],
        straightLabelStyles: { translate: "-20% 0px" },
      };
    else if (length >= 5)
      return {
        label: [{ transform: "translateY(-3%) skewY(10deg)" }],
        design: [{ height: "96%", width: "95%" }],
        orientation: [
          {
            rotate: "5deg",
            transform: "skew(5deg)",
            translate: `-1px 0px`,
          },
        ],
        straightLabelStyles: { translate: "-3px 0px" },
      };
    else if (length >= 3)
      return {
        label: [
          { transform: "translateY(-7%) skewY(10deg)" },
          { translate: "-3px 14%" },
        ],
        design: [{ height: "95%" }, {}],
        orientation: [
          {
            width: orientation === 4 ? "95%" : "100%",
            rotate: "7deg",
            transform: "skew(5deg)",
            translate: `-1px 0px`,
          },
          { rotate: "5deg", transform: "skew(5deg)" },
        ],
        straightLabelStyles: { translate: "-10% 0px" },
      };
    else if (length <= 2)
      return length === 2
        ? {
            label: [
              { translate: "0px 5%" },
              { translate: "-4px 10%" },
              { translate: "-7px 15%" },
              { translate: "-10px 15%" },
            ],
            design: [
              { height: "90%" },
              { height: "100%" },
              { height: "100%" },
              { height: "100%" },
            ],
            orientation: [
              {
                rotate: "20deg",
                transform: "skew(15deg)",
                translate: `-1px 0px`,
              },
              { rotate: "15deg", transform: "skew(15deg)" },
              { rotate: "10deg" },
              {},
            ],
            straightLabelStyles: { translate: "-50% 0px" },
          }
        : {
            label: [
              { translate: "0px 5%" },
              { translate: "-4px 10%" },
              { translate: "-7px 12%" },
              { translate: "-10px 15%" },
            ],
            design: [
              { height: "90%" },
              { height: "95%" },
              { height: "100%" },
              { height: "100%" },
            ],
            orientation: [
              {
                rotate: "20deg",
                transform: "skew(15deg)",
                translate: `-1px 0px`,
              },
              { rotate: "15deg", transform: "skew(15deg)" },
              { rotate: "10deg" },
              {},
            ],
            straightLabelStyles: { translate: "-90% 0px" },
          };
  },
  12: (length, orientation) => {
    if (length > 12)
      return {
        label:
          length >= 13 && length <= 15
            ? [{ transform: "translate(-2px, -14px) skewY(5deg)" }]
            : [{ transform: "translate(-2px, -9px) skewY(5deg)" }],
        design: [
          {
            height: "85%",
            width: "90%",
            transform: "rotate(7deg) translate(-50%, 15px)",
          },
        ],
        orientation: [
          {
            width: orientation === 4 ? "85%" : "100%",
            rotate: "5deg",
            transform: "skew(5deg)",
            translate: `-1px 0px`,
          },
        ],
        straightLabelStyles: { translate: "-55% 0px" },
      };
    if (length >= 8)
      return {
        label: [{ transform: "translateY(-1%) skewY(5deg)" }],
        design: [{ height: "96%", width: "80%" }],
        orientation: [
          {
            width: orientation === 4 ? "95%" : "100%",
            rotate: "5deg",
            transform: "skew(5deg)",
            translate: `-1px 0px`,
          },
        ],
        straightLabelStyles: { translate: "-20% 0px" },
      };
    else if (length >= 5)
      return {
        label: [{ transform: "translateY(-3%) skewY(5deg)" }],
        design: [{ height: "96%", width: "95%" }],
        orientation: [
          {
            width: orientation === 4 ? "95%" : "100%",
            rotate: "5deg",
            transform: "skew(5deg)",
            translate: `-1px 0px`,
          },
        ],
        straightLabelStyles: { translate: "-3px 0px" },
      };
    else if (length >= 3)
      return {
        label: [
          { transform: "translateY(-7%) skewY(20deg)" },
          { translate: "-3px 14%" },
        ],
        design: [{ height: "95%" }, {}],
        orientation: [
          {
            width: orientation === 4 ? "95%" : "100%",
            rotate: "5deg",
            transform: "skew(5deg)",
            translate: `-1px 0px`,
          },
          { rotate: "5deg", transform: "skew(5deg)" },
        ],
        straightLabelStyles: { translate: "-10% 0px" },
      };
    else if (length <= 2)
      return length === 2
        ? {
            label: [
              { translate: "0px 5%" },
              { translate: "-4px 10%" },
              { translate: "-7px 15%" },
              { translate: "-10px 15%" },
            ],
            design: [
              { height: "90%" },
              { height: "100%" },
              { height: "100%" },
              { height: "100%" },
            ],
            orientation: [
              {
                rotate: "20deg",
                transform: "skew(15deg)",
                translate: `-1px 0px`,
              },
              { rotate: "15deg", transform: "skew(15deg)" },
              { rotate: "10deg" },
              {},
            ],
            straightLabelStyles: { translate: "-50% 0px" },
          }
        : {
            label: [
              { translate: "0px 5%" },
              { translate: "-4px 10%" },
              { translate: "-7px 12%" },
              { translate: "-10px 15%" },
            ],
            design: [
              { height: "90%" },
              { height: "95%" },
              { height: "100%" },
              { height: "100%" },
            ],
            orientation: [
              {
                rotate: orientation === 4 ? "25deg" : "20deg",
                transform: "skew(15deg)",
                translate: `-1px 0px`,
              },
              { rotate: "15deg", transform: "skew(15deg)" },
              { rotate: "10deg" },
              {},
            ],
            straightLabelStyles: { translate: "-90% 0px" },
          };
  },
};

export const transformRoundShape = (width, length, orientation) => {
  const { labelWidth, labelLength } = validateDimensions(width, length);
  const transform = roundCoor[labelWidth](labelLength, orientation);
  transform.image =
    labelLength >= 12
      ? "logo-3"
      : labelLength >= 5
      ? "logo-1"
      : labelLength >= 3
      ? "logo-2"
      : "logo-4";
  return transform;
};
